<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python基础</title>
    <link href="/2022/10/25/%E5%90%8E%E7%AB%AF%E7%9F%A5%E8%AF%86/python%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/10/25/%E5%90%8E%E7%AB%AF%E7%9F%A5%E8%AF%86/python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="1-本章为转载内容"><a href="#1-本章为转载内容" class="headerlink" title="1.本章为转载内容"></a>1.本章为转载内容</h1><p>————————————————<br>版权声明：本文为CSDN博主「Terence全栈开发」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/ityard/article/details/102807071">https://blog.csdn.net/ityard/article/details/102807071</a></p><h2 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2 关键字"></a>2 关键字</h2><p>and</p><p>exec</p><p>not</p><p>assert</p><p>finally</p><p>or</p><p><strong>break</strong></p><p><strong>for</strong></p><p><strong>pass</strong></p><p><strong>class</strong></p><p><strong>from</strong></p><p><strong>print</strong></p><p><strong>continue</strong></p><p><strong>global</strong></p><p><strong>raise</strong></p><p><strong>def</strong></p><p><strong>if</strong></p><p><strong>return</strong></p><p><strong>del</strong></p><p><strong>import</strong></p><p><strong>try</strong></p><p><strong>elif</strong></p><p><strong>in</strong></p><p><strong>while</strong></p><p><strong>else</strong></p><p><strong>is</strong></p><p><strong>with</strong></p><p><strong>except</strong></p><p><strong>lambda</strong></p><p><strong>yield</strong></p><p>上面表中是 Python 中的关键字（保留字），我们在自定义标识符时不能使用关键字。</p><h2 id="3-引号"><a href="#3-引号" class="headerlink" title="3 引号"></a>3 引号</h2><p>Python 可以使用引号（<code>&#39;</code>）、双引号（<code>&quot;</code>）、三引号（<code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code>）来表示字符串，引号的开始与结束须类型相同，三引号可以由多行组成。如下所示：</p><pre><code class="hljs">id = &#39;001&#39;name = &quot;张三&quot;skill = &#39;&#39;&#39;唱歌跳舞&#39;&#39;&#39;skill = &quot;&quot;&quot;唱歌跳舞&quot;&quot;&quot;</code></pre><h2 id="4-编码"><a href="#4-编码" class="headerlink" title="4 编码"></a>4 编码</h2><p>Python2 中默认编码为 <code>ASCII</code>，假如内容为汉字，不指定编码便不能正确的输出及读取，比如我们想要指定编码为 <code>UTF-8</code>，Python 中通过在开头加入 <code># -*- coding: UTF-8 -*-</code> 进行指定。</p><p>Python3 中默认编码为 <code>UTF-8</code>，因此在使用 Python3 时，我们通常不需指定编码。</p><h2 id="5-输入输出"><a href="#5-输入输出" class="headerlink" title="5 输入输出"></a>5 输入输出</h2><p>Python 输出使用 print()，内容加在括号中即可。如下所示：</p><pre><code class="hljs">print(&#39;Hello Python&#39;)</code></pre><p>Python 提供了一个 input()，可以让用户输入字符串，并存放到一个变量里。如下所示：</p><pre><code class="hljs">name = input()print(&#39;Hi&#39;,name)</code></pre><h2 id="6-缩进"><a href="#6-缩进" class="headerlink" title="6 缩进"></a>6 缩进</h2><p>Python 不使用 <code>&#123;&#125;</code> 来控制类、函数、逻辑判断等，而是使用缩进，缩进的空格可变。如下所示：</p><pre><code class="hljs">if True:    print(True)else:    print(False)</code></pre><h2 id="7-多行"><a href="#7-多行" class="headerlink" title="7 多行"></a>7 多行</h2><p>Python 中一般以新行作为语句的结束标识，可以使用 <code>\</code> 将一行语句分为多行显示。如下所示：</p><pre><code class="hljs">a = 128b = 1024c = 512d = a + \    b - \    c</code></pre><p>如果包含在 <code>[]</code>、<code>&#123;&#125;</code>、<code>()</code> 括号中，则不需要使用 <code>\</code>。如下所示：</p><pre><code class="hljs">arr = &#123;    a,    b,    c&#125;</code></pre><h2 id="8-注释"><a href="#8-注释" class="headerlink" title="8 注释"></a>8 注释</h2><p>Python 中单行注释使用 <code>#</code>，多行注释使用三个单引号（<code>&#39;&#39;&#39;</code>）或三个双引号（<code>&quot;&quot;&quot;</code>）。如下所示：</p><pre><code class="hljs"># 我是单行注释&#39;&#39;&#39;我是多行注释我是多行注释&#39;&#39;&#39;&quot;&quot;&quot;我是多行注释我是多行注释&quot;&quot;&quot;</code></pre><h2 id="9-数据类型"><a href="#9-数据类型" class="headerlink" title="9 数据类型"></a>9 数据类型</h2><ul><li><p><strong>整数</strong>：可以为任意大小、包含负数</p></li><li><p><strong>浮点数</strong>：就是小数</p></li><li><p><strong>字符串</strong>：以单引号 <code>&#39;</code>、双引号<code>&quot;</code>、三引号 <code>&#39;&#39;&#39;</code> 或 <code>&quot;&quot;&quot;</code>括起来的文本</p></li><li><p><strong>布尔</strong>：只有 <code>True</code>、<code>False</code> 两种值</p></li><li><p><strong>空值</strong>：用 <code>None</code> 表示</p></li><li><p><strong>变量</strong>：是可变的</p></li><li><p><strong>常量</strong>：不可变</p></li></ul><h2 id="10-运算符"><a href="#10-运算符" class="headerlink" title="10 运算符"></a>10 运算符</h2><h3 id="10-1-常用运算符"><a href="#10-1-常用运算符" class="headerlink" title="10.1 常用运算符"></a>10.1 常用运算符</h3><p>运算符</p><p>描述</p><p>示例</p><ul><li></li></ul><p>相加</p><p>a + b</p><p>-</p><p>相减</p><p>a - b</p><p>*</p><p>相乘</p><p>a * b</p><p>&#x2F;</p><p>相除</p><p>a &#x2F; b</p><p>%</p><p>取模</p><p>a % b</p><p>**</p><p>幂</p><p>a**b 表示 a 的 b 次幂</p><p>&#x2F;&#x2F;</p><p>取整除</p><p>9 &#x2F;&#x2F; 4 结果为 2</p><p>=&#x3D;</p><p>是否相等</p><p>a &#x3D;&#x3D; b</p><p>!&#x3D;</p><p>是否不等于</p><p>a !&#x3D; b</p><p>&gt;</p><p>是否大于</p><p>a &gt; b</p><p>&gt;&#x3D;</p><p>是否大于等于</p><p>a &gt;&#x3D; b</p><p>&lt;&#x3D;</p><p>是否小于等于</p><p>a &lt;&#x3D; b</p><p>=</p><p>简单的赋值运算符</p><p>a &#x3D; b + c</p><p>+&#x3D;</p><p>加法赋值运算符</p><p>a +&#x3D; b 等效于 a &#x3D; a + b</p><p>-&#x3D;</p><p>减法赋值运算符</p><p>a -&#x3D; b 等效于 a &#x3D; a - b</p><p>*&#x3D;</p><p>乘法赋值运算符</p><p>a *&#x3D; b 等效于 a &#x3D; a * b</p><p>&#x2F;&#x3D;</p><p>除法赋值运算符</p><p>a &#x2F;&#x3D; b 等效于 a &#x3D; a &#x2F; b</p><p>%&#x3D;</p><p>取模赋值运算符</p><p>a %&#x3D; b 等效于 a &#x3D; a % b</p><p>**&#x3D;</p><p>幂赋值运算符</p><p>a **&#x3D; b 等效于 a &#x3D; a ** b</p><p>&#x2F;&#x2F;&#x3D;</p><p>取整除赋值运算符</p><p>a &#x2F;&#x2F;&#x3D; b 等效于 a &#x3D; a &#x2F;&#x2F; b</p><p>&amp;</p><p>与</p><p>a &amp; b</p><p>|</p><p>或</p><p>a | b</p><p>^</p><p>异或</p><p>a ^ b</p><p>~</p><p>取反</p><p>~a</p><p>&lt;&lt;</p><p>左移动</p><p>a &lt;&lt; 3</p><p>&gt;&gt;</p><p>右移动</p><p>a &gt;&gt; 3</p><p>and</p><p>布尔类型与</p><p>a and b</p><p>or</p><p>布尔类型或</p><p>a or b</p><p>not</p><p>布尔类型非</p><p>not a</p><p>is</p><p>判断两个标识符是否引用同一个对象</p><p>a is b</p><p>is not</p><p>判断两个标识符是否引用不同对象</p><p>a is not b</p><h3 id="10-2-运算符优先级"><a href="#10-2-运算符优先级" class="headerlink" title="10.2 运算符优先级"></a>10.2 运算符优先级</h3><p>运算符</p><p>描述（由上至下对应优先级由高到低）</p><p>**</p><p>幂运算</p><p>~ + -</p><p>取反、正号、负号</p><p>* &#x2F; % &#x2F;&#x2F;</p><p>乘、除、取模、取整除</p><p>+ -</p><p>加法、减法</p><p>&gt;&gt; &lt;&lt;</p><p>右移、左移</p><p>&amp;</p><p>与</p><p>^ |</p><p>异或、或</p><p>&lt;&#x3D; &lt; &gt; &gt;&#x3D;</p><p>比较运算符</p><p>=&#x3D; !&#x3D;</p><p>是否等于、是否不等于</p><p>= %&#x3D; &#x2F;&#x3D; &#x2F;&#x2F;&#x3D; -&#x3D; +&#x3D; *&#x3D; **&#x3D;</p><p>赋值运算符</p><p>is is not</p><p>身份运算符</p><p>in not in</p><p>成员运算符</p><p>not and or</p><p>逻辑运算符</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p><a href="https://mp.weixin.qq.com/s/xp4op4PjEtznuxqW3vBfOg">Python 基础（二）：基本语句</a><br><a href="https://mp.weixin.qq.com/s/FBnTvFaXqULIJ0WvUc4Euw">Python 基础（三）：我是一个数字</a><br><a href="https://mp.weixin.qq.com/s/x4v5Ml3J-D7pB2nvfoMpaQ">Python 基础（四）：字符串</a><br><a href="https://mp.weixin.qq.com/s/D8b5YEkML2I3v-M0XmGJ_w">Python 基础（五）：序列</a><br><a href="https://mp.weixin.qq.com/s/OcfT6UIQNOGMmkGiWQTtUA">Python 基础（六）：列表与元组</a><br><a href="https://mp.weixin.qq.com/s/ouhWQJDR99wcRq6u1J05jA">Python 基础（七）：字典与集合</a><br><a href="https://mp.weixin.qq.com/s/fBGKrjGcBdC5ZXYFQfRF7A">Python 基础（八）：与时间相关的模块</a><br><a href="https://mp.weixin.qq.com/s/V3IplZNTiKtrrkbSUrBt7Q">Python 基础（九）：函数</a><br><a href="https://mp.weixin.qq.com/s/YWuSsMn9BUw4XzFmruQVGw">Python 基础（十）：模块与包</a><br><a href="https://mp.weixin.qq.com/s/oE2SjtHyUX0f50w-WCFL3w">Python 基础（十一）：面向对象</a><br><a href="https://mp.weixin.qq.com/s/0bVgw-_68xlw82A0qkTjDA">Python 基础（十二）：文件基本操作</a><br><a href="https://mp.weixin.qq.com/s/Fsu21H109zgrQ8pQo26PcA">Python 基础（十三）：os 模块</a><br><a href="https://mp.weixin.qq.com/s/y1l7vjoN1YEKA0VPql4Dnw">Python 基础（十四）：错误和异常</a><br><a href="https://mp.weixin.qq.com/s/hiLV-toP2cDuw7AQ12VGyw">Python 基础（十五）：枚举</a><br><a href="https://mp.weixin.qq.com/s/SpR50SGq-soXHqdSV9u8Zw">Python 基础（十六）：迭代器与生成器</a><br><a href="https://mp.weixin.qq.com/s/hC8FnCdWwjAAa6ysjzshVQ">Python 基础（十七）：装饰器</a><br><a href="https://mp.weixin.qq.com/s/vV2nxpg3qW2OUuu_P3pGLw">Python 基础（十八）：命名空间 &amp; 作用域</a><br><a href="https://mp.weixin.qq.com/s/oSteWYlAgpLdSzxei4v6jg">Python 基础（十九）：数学相关模块</a><br><a href="https://mp.weixin.qq.com/s/HELV_4kKhpRa-JIl-xIiQA">Python 基础（二十）：sys 模块</a><br><a href="https://mp.weixin.qq.com/s/lPuJUXLN8BoBLmfeG9qsZA">Python 基础（二十一）：argparse 模块</a><br><a href="https://mp.weixin.qq.com/s/WhVHhnRKRzHoCxWLC_rG5w">Python 基础（二十二）：正则表达式</a></p><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p><a href="https://mp.weixin.qq.com/s/31c3t8XHnrDpdfO0lKZa8g">Python 进阶（一）：多线程</a><br><a href="https://mp.weixin.qq.com/s/Vu1EJbobRjbflTwikI3Ktw">Python 进阶（二）：多进程</a><br><a href="https://mp.weixin.qq.com/s/48I0OMkZSO8gcDyyydkrAw">Python 进阶（三）：邮件的发送与收取</a><br><a href="https://mp.weixin.qq.com/s/vpO8ADkyrzqHpuq73n6Ddw">Python 进阶（四）：数据库操作之 MySQL</a><br><a href="https://mp.weixin.qq.com/s/sXLdS9PhPVDdxLC2L5_w8w">Python 进阶（五）：数据库操作之 SQLite</a><br><a href="https://mp.weixin.qq.com/s/7ARxA56CkwaxgA39ue-6OQ">Python 进阶（六）： Excel 基本操作</a><br><a href="https://mp.weixin.qq.com/s/W8XLpTkCpfnwBVShRbp5wg">Python 进阶（七）： Word 基本操作</a><br><a href="https://mp.weixin.qq.com/s/uNEwkMaSA3W7knfyoX_POA">Python 进阶（八）：XML 基本操作</a><br><a href="https://mp.weixin.qq.com/s/x6-WmmtrKSdE3beMbIgwhQ">Python 进阶（九）：JSON 基本操作</a><br><a href="https://mp.weixin.qq.com/s/DqbmaiJurcbjCNRyDZlqVQ">Python 进阶（十）：网络编程</a></p><h1 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h1><p><a href="https://blog.csdn.net/ityard/article/details/120942236">100+ Python 爬虫经典实战项目</a><br><a href="https://mp.weixin.qq.com/s/olb0vzD1OtxcjHGjv5_1jw">Python 爬虫（一）：爬虫伪装</a><br><a href="https://mp.weixin.qq.com/s/ZPMPC9R7dvsVNQ47QqeFLw">Python 爬虫（二）：Requests库</a><br><a href="https://mp.weixin.qq.com/s/rIrc0aXYKm1ke5stxpJj-w">Python 爬虫（三）：BeautifulSoup库</a><br><a href="https://mp.weixin.qq.com/s/Lj89zKS1O5Q7ItVa5Zw3HQ">Python 爬虫（四）：Selenium 框架</a><br><a href="https://mp.weixin.qq.com/s/qiPHdNiF73jBCaATNucxHA">Python 爬虫（五）：PyQuery 框架</a><br><a href="https://mp.weixin.qq.com/s/gMxDNSWVgHflWoE7B_Xy0Q">Python 爬虫（六）：Scrapy 爬取景区信息</a><br><a href="https://mp.weixin.qq.com/s/nfOc8su6d9jwrqCW1S3Iyg">Python 爬虫（七）：pyspider 使用</a><br><a href="https://mp.weixin.qq.com/s/WRKC9WVMMSqER0STGjIwbg">Python 爬取知乎问答</a><br><a href="https://mp.weixin.qq.com/s/hbZUWjob1U06ugIKojdHqw">Python 爬取公众号文章</a><br><a href="https://mp.weixin.qq.com/s/r__yDAaZm5qHXpO3slGJGQ">Python 爬取 B 站《后浪》弹幕</a><br><a href="https://mp.weixin.qq.com/s/1DDkqehBEZQdQ4JKG67GfQ">Python 爬取爱奇艺《民国奇探》弹幕</a><br><a href="https://mp.weixin.qq.com/s/g4CGeBBMuPQ5eob_9M345g">用Python爬取英雄联盟（lol）全部皮肤</a><br><a href="https://mp.weixin.qq.com/s/QTcNe84W195LeKq7HtDESQ">Python 爬取豆瓣《南方车站的聚会》评论</a><br><a href="https://mp.weixin.qq.com/s/DjTa_n7sOWSxDGwLTKtdug">用Python爬取了三大相亲软件评论区，结果…</a><br><a href="https://mp.weixin.qq.com/s/kLOXj6oRG_OwL19HwHc_oA">爬取林丹和赵雅淇的微博评论，看看网友都说了些什么</a></p><h1 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h1><p><a href="https://mp.weixin.qq.com/s/jx6JnbYKR1J_8Uv1d_KmRg">Word 批量转 PDF</a><br><a href="https://mp.weixin.qq.com/s/2hLdJEHNPal3G9kb--P9uQ">Python 批量合并 Excel</a><br><a href="https://blog.csdn.net/ityard/article/details/118461225">自动化神器！Python 批量读取身份证信息写入 Excel</a><br><a href="https://blog.csdn.net/ityard/article/details/109498443">Python + Appium 自动化操作微信入门看这一篇就够了</a><br><a href="https://blog.csdn.net/ityard/article/details/110020469">用Python实现微信自动化抢红包，再也不用担心抢不到红包了</a><br><a href="https://blog.csdn.net/ityard/article/details/109558416">我用 Python 找出了删除我微信的所有人并将他们自动化删除了</a><br><a href="https://ityard.blog.csdn.net/article/details/109733747">用Python实现定时自动化收取蚂蚁森林能量，再也不用担心忘记收取了</a></p><h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><p><a href="https://ityard.blog.csdn.net/article/details/104727326">Python 数据分析（一）：NumPy 基础知识</a><br><a href="https://ityard.blog.csdn.net/article/details/104854354">Python 数据分析（二）：Matplotlib 绘图</a><br><a href="https://ityard.blog.csdn.net/article/details/104873042">Python 数据分析（三）：初识 Pandas</a><br><a href="https://ityard.blog.csdn.net/article/details/105010070">Python 数据分析（四）：Pandas 进阶</a><br><a href="https://mp.weixin.qq.com/s/93cM--oG8INpWxzuPAwVuQ">最全的 NumPy 教程</a><br><a href="https://mp.weixin.qq.com/s/L0sKfEVSfDLG6g8nMIDyaA">Python 分析《龙岭迷窟》</a><br><a href="https://mp.weixin.qq.com/s/RZ0d9FWDJDPH2IqrIsThMw">Python 绘制各种疫情图</a><br><a href="https://zhuanlan.zhihu.com/p/439700997">Python 数据分析入门知识手册</a><br><a href="https://blog.csdn.net/ityard/article/details/118214228">Pandas 速查表&amp;中文文档&amp;视频教程</a><br><a href="https://mp.weixin.qq.com/s/FjNzAxkioePPG1a6vR0jTQ">用 Python 分析电影《我和我的家乡》</a><br><a href="https://ityard.blog.csdn.net/article/details/122771841">2022春节贺岁档电影开分，用Python一探究竟</a><br><a href="https://mp.weixin.qq.com/s/E3YwBLrYXXiAylQXAzMjWw">2021年国庆你的朋友去哪浪了？让Python告诉你</a><br><a href="https://mp.weixin.qq.com/s/4Vb4l2ze4hnrErSVduVkGA">wlh的瓜很大！我用Python爬取了瓜文评论区，发现更精彩</a></p><h1 id="编写小游戏"><a href="#编写小游戏" class="headerlink" title="编写小游戏"></a>编写小游戏</h1><p><a href="https://blog.csdn.net/ityard/article/details/113793237">扫雷</a><br><a href="https://mp.weixin.qq.com/s/LcWpu2ENepoPd96z_sMS_w">贪吃蛇</a><br><a href="https://mp.weixin.qq.com/s/dYi21tV8bOoQUfQ23MQQRA">坦克大战</a><br><a href="https://mp.weixin.qq.com/s/0bNIu8JyrBUOGa3v9Nt0kw">飞机大战</a><br><a href="https://mp.weixin.qq.com/s/2H_OrMP7YdRaPzc-3zhaqA">开心消消乐</a><br><a href="https://mp.weixin.qq.com/s/uJV6dJh3_eUb8Ll8mPc85Q">俄罗斯方块</a><br><a href="https://mp.weixin.qq.com/s/LAwFhz5FTquWmE9ertAGcA">植物大战僵尸</a><br><a href="https://ityard.blog.csdn.net/article/details/124521784">魂斗罗+30个Python小游戏</a></p><h1 id="趣味-Python"><a href="#趣味-Python" class="headerlink" title="趣味 Python"></a>趣味 Python</h1><p><a href="https://mp.weixin.qq.com/s/rjKuteg3VjQH-W9twQ6Zlw">当 Python 遇到微信</a><br><a href="https://mp.weixin.qq.com/s/btPSjj59UfYYXJvDW1lrmw">我用 Python 把老板辞退了</a><br><a href="https://mp.weixin.qq.com/s/B9kGJmgbwdwsMnE-3PMXFA">用 Python 写个七夕表白神器</a><br><a href="https://mp.weixin.qq.com/s/UhlHK8pCGYAcHTL7M7NI4Q">用 Python 实现微信自动回复</a><br><a href="https://mp.weixin.qq.com/s/DF7_b_F1iHUqPnOqYV3uYA">用 Python 下载抖音无水印视频</a><br><a href="https://mp.weixin.qq.com/s/h0ZIqCFmGfVUMOVFnSyjsw">Python 实现黑客帝国代码雨效果</a><br><a href="https://mp.weixin.qq.com/s/0DWZAc_Q_sbHnJNf5GpiVg">用 Python 制作炫酷二维码及解析</a><br><a href="https://mp.weixin.qq.com/s/4-eLMsR7cJDwC9GiPSZxHQ">用 Python 写一个颜值测试小工具</a><br><a href="https://mp.weixin.qq.com/s/pVLHXz8Z14uGC7TqLTIy2w">用 Python 送上特殊的母亲节祝福</a><br><a href="https://mp.weixin.qq.com/s/qEfslv82tU9ksqUU9Ojveg">骚操作 | 用 Python 实现 GIF 倒放</a><br><a href="https://mp.weixin.qq.com/s/EjD0U-yLhjL5Jm9TdEpDyQ">用 Python 画一个奸笑(滑稽)表情</a><br><a href="https://mp.weixin.qq.com/s/trfSE4iwX-IKtX2QykCwqA">用 Python 制作一个艺术签名小工具</a><br><a href="https://mp.weixin.qq.com/s/AozTLZVtJSJ38ggYaUmWnA">我用 Python 画了一盘粽子送给大家</a><br><a href="https://mp.weixin.qq.com/s/iAXjTbJ6GDRFIWcgITn7iQ">用Python画一棵带音乐的雪夜圣诞树</a><br><a href="https://mp.weixin.qq.com/s/UFeblkyWTSc2y3fzt5Qeag">备战 618，用 Python 领取京东优惠券</a><br><a href="https://mp.weixin.qq.com/s/PcvL4QKW4wWNPnTL9hboPw">用 Python 实现朋友圈中的九宫格图片</a><br><a href="https://mp.weixin.qq.com/s/w7bB0iXxbduog5HGcbz63g">用 Python 实现一场环保无污染的烟花秀</a><br><a href="https://mp.weixin.qq.com/s/SfLYtAqM23Z-u-FvVbnVPw">用 Python 了解一下最炫国漫《雾山五行》</a><br><a href="https://ityard.blog.csdn.net/article/details/122660590">快过年了，用Python写副春联&amp;福字送给你</a><br><a href="https://mp.weixin.qq.com/s/uqGUlyd2-JinDDBv1He03w">不到 100 行 Python 代码即可实现换脸功能</a><br><a href="https://ityard.blog.csdn.net/article/details/124785862">朋友过生日，用Python给她画了个生日蛋糕</a><br><a href="https://blog.csdn.net/ityard/article/details/105722507">不到 20 行 Python 代码即可制作精美证件照</a><br><a href="https://mp.weixin.qq.com/s/qtW2SXy1U2G1Fi-7YWT74g">用 Python 将 QQ 好友头像生成「 五一快乐」</a><br><a href="https://mp.weixin.qq.com/s/esjJlmeOhAAggXmY-eazbw">一行命令给猎狐 F4 带口罩 &amp; 检测是否带口罩</a><br><a href="https://mp.weixin.qq.com/s/I5kX4e_3azB2tOCEFgbKig">用 Python 给自己的头像加一个小国旗（小月饼）</a><br><a href="https://mp.weixin.qq.com/s/INcJ7fHKYdqMi3QJ1PfUUw">还在为 520 发愁吗？教你用 Python 写个表白神器</a></p><h1 id="文档-amp-实战项目"><a href="#文档-amp-实战项目" class="headerlink" title="文档 &amp; 实战项目"></a>文档 &amp; 实战项目</h1><p><a href="https://blog.csdn.net/ityard/article/details/117757782">Python 学习手册</a><br><a href="https://ityard.blog.csdn.net/article/details/120915864">Python3.10 官方文档 PDF</a><br><a href="https://github.com/ityard/python-fxxk-spider">100+ Python 爬虫经典实战项目</a><br><a href="https://ityard.blog.csdn.net/article/details/120793211">70 个 Python 经典实用练手项目(附源码)</a><br><a href="https://ityard.blog.csdn.net/article/details/125340366">Python面试大全PDF(245道Python面试题)</a><br><a href="https://ityard.blog.csdn.net/article/details/124765017">240个Python练习案例附源码(百看不如一练)</a></p><h1 id="Python-自学路线"><a href="#Python-自学路线" class="headerlink" title="Python 自学路线"></a>Python 自学路线</h1><p><a href="https://zhuanlan.zhihu.com/p/433045773">Python 全套学习笔记(入门+爬虫+可视化&amp;数据分析+机器学习+深度学习)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c基础</title>
    <link href="/2022/10/25/%E5%90%8E%E7%AB%AF%E7%9F%A5%E8%AF%86/c%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/10/25/%E5%90%8E%E7%AB%AF%E7%9F%A5%E8%AF%86/c%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="一-本章为转载内容"><a href="#一-本章为转载内容" class="headerlink" title="一.本章为转载内容"></a>一.本章为转载内容</h1><p>————————————————<br>版权声明：本文为CSDN博主「Terence全栈开发」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_55305220/article/details/118520244">https://blog.csdn.net/weixin_55305220/article/details/118520244</a></p><h1 id="二、C语言的具体结构"><a href="#二、C语言的具体结构" class="headerlink" title="二、C语言的具体结构"></a><strong>二、C语言的具体结构</strong></h1><p>简单来说，一个C程序就是由若干<code>头文件</code>和<code>函数</code>组成。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6a032c0a2282e47772ee34b23254bac7.png" alt="mark"></p><ul><li><p><code>#include &lt;stdio.h&gt;</code>就是一条<a href="https://so.csdn.net/so/search?q=%E9%A2%84%E5%A4%84%E7%90%86&spm=1001.2101.3001.7020">预处理</a>命令, 它的作用是通知C语言编译系统在对C程序进行正式编译之前需做一些预处理工作。</p></li><li><p><code>函数</code>就是实现代码逻辑的一个小的单元。</p></li></ul><h1 id="三、主函数"><a href="#三、主函数" class="headerlink" title="三、主函数"></a><strong>三、主函数</strong></h1><p>一个C程序有且只有一个主函数，即main函数。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b83b626a9d8761ee6d9eb0ab9da9f56c.png"></p><ul><li>C程序就是执行主函数里的代码，也可以说这个<strong>主函数</strong>就是C语言中的<strong>唯一入口</strong>。</li><li>而main前面的int就是主函数的类型.</li><li>printf()是<strong>格式输出</strong>函数，这里就记住它的功能就是在<strong>屏幕上输出指定的信息</strong></li><li>return是函数的返回值，根据函数类型的不同，返回的值也是不同的。</li><li>\n是转义字符中的换行符。(注意：C程序一定是从主函数开始执行的)</li></ul><h1 id="四、规范"><a href="#四、规范" class="headerlink" title="四、规范"></a><strong>四、规范</strong></h1><ul><li><strong>一个说明或一个语句占一行</strong>，例如：包含头文件、一个可执行语句结束都需要<strong>换行</strong>。</li><li>函数体内的语句要有明显<strong>缩进</strong>，<strong>通常以按一下Tab键为一个缩进</strong>。</li><li>括号要<strong>成对写</strong>，如果需要删除的话也要<strong>成对删除</strong>。</li><li>当一句可执行语句结束的时候末尾需要有<strong>分号</strong>。</li><li>代码中所有符号均为<strong>英文半角符号</strong>。</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/f02fd4807b32b812860713497b8161b5.png" alt="mark"></p><h1 id="五、程序解释——注释"><a href="#五、程序解释——注释" class="headerlink" title="五、程序解释——注释"></a><strong>五、程序解释——注释</strong></h1><p>注释是写给程序员看的，不是写给电脑看的。</p><p>C语言注释方法有两种：</p><blockquote><p>多行注释： <code>/* 注释内容 */</code></p></blockquote><blockquote><p>单行注释： <code>//注释一行</code></p></blockquote><h1 id="六、C的标识符"><a href="#六、C的标识符" class="headerlink" title="六、C的标识符"></a><strong>六、C的标识符</strong></h1><p>C语言规定，标识符可以是字母(A～Z，a～z)、数字(0～9)、下划线_组成的字符串，并且第一个字符必须是字母或下划线。在使用标识符时还有注意以下几点：</p><ul><li>标识符的长度最好不要超过8位，因为在某些版本的C中规定标识符前8位有效，当两个标识符前8位相同时，则被认为是同一个标识符。</li><li>标识符是严格区分大小写的。例如Imooc和imooc 是两个不同的标识符。</li><li>标识符最好选择有意义的英文单词组成做到”见名知意”，不要使用中文。</li><li>标识符不能是C语言的关键字。想了解更多C语言关键字的知识。</li></ul><pre><code class="hljs"> </code></pre><h1 id="七、变量及赋值"><a href="#七、变量及赋值" class="headerlink" title="七、变量及赋值"></a><strong>七、变量及赋值</strong></h1><p>变量就是可以变化的量，而每个变量都会有一个名字（标识符）。变量占据内存中一定的存储单元。使用变量之前必须先定义变量，要区分变量名和变量值是两个不同的概念。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a8192164f909556afd96bcd009a4f130.png"></p><p>变量定义的一般形式为：数据类型 变量名;</p><p>多个类型相同的变量：数据类型 变量名, 变量名, 变量名…;</p><p><img src="https://img-blog.csdnimg.cn/img_convert/998fae23d6e29e85411f41eb53a188fd.png"></p><p><strong>注意:在定义中不允许连续赋值，如int a&#x3D;b&#x3D;c&#x3D;5;是不合法的。</strong></p><p>变量的赋值分为两种方式:</p><ul><li>先声明再赋值</li><li>声明的同时赋值</li></ul><h1 id="八、基本数据类型"><a href="#八、基本数据类型" class="headerlink" title="八、基本数据类型"></a><strong>八、基本数据类型</strong></h1><p>C语言中，数据类型可分为：</p><ul><li>基本数据类型</li><li>构造数据类型</li><li>指针类型</li><li>空类型四大类</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/e671d31452bcdbb9621d33f817b61349.png"></p><p><strong>最常用的整型, 实型与字符型(char,int,float,double):</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6ea6373cf0ab35bd9e20e241315c32d4.png"></p><p><strong>整型数据</strong>是指不带小数的数字(int,short int,long int, unsigned int, unsigned short int,unsigned long int):</p><p><img src="https://img-blog.csdnimg.cn/img_convert/50d855eadf4a2f953989d0090545a38d.png" alt="整型"></p><p>注：</p><ul><li>int short int long int是根据编译环境的不同，所取范围不同。</li><li>而其中short int和long int至少是表中所写范围, 但是int在表中是以16位编译环境写的取值范围。</li><li>另外 c语言int的取值范围在于他占用的字节数 ，不同的编译器，规定是不一样。</li><li>ANSI标准定义int是占2个字节，TC是按ANSI标准的，它的int是占2个字节的。但是在VC里，一个int是占4个字节的。</li></ul><p>浮点数据是指带小数的数字。</p><blockquote><p>生活中有很多信息适合使用浮点型数据来表示，比如：人的体重(单位：公斤)、商品价格、圆周率等等。</p></blockquote><p>因为精度的不同又分为3种(float,double,long double)：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ba3adb33221ba262997156095e8e5b64.png" alt="浮点型"></p><h1 id="九、格式化输出语句"><a href="#九、格式化输出语句" class="headerlink" title="九、格式化输出语句"></a><strong>九、格式化输出语句</strong></h1><p>格式化输出语句，也可以说是<strong>占位输出</strong>，是将各种类型的数据按照<strong>格式化后的类型及指定的位置</strong>从计算机上显示。</p><p>其格式为：<code>printf(&quot;输出格式符&quot;，输出项)</code>;</p><p><img src="https://img-blog.csdnimg.cn/img_convert/be3d7bafda1b5321fb9354ce7128aa27.png"></p><p>当输出语句中包含普通字符时，可以采用以下格式：</p><pre><code class="hljs">printf(&quot;普通字符输出格式符&quot;, 输出项);</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/19d9002957c0ded0bd30278e749b5e63.png" alt="mark"></p><p>注意：<strong>格式符</strong>的<strong>个数</strong>要与<strong>变量、常量或者表达式的个数一</strong>一对应</p><h1 id="十、常量"><a href="#十、常量" class="headerlink" title="十、常量"></a><strong>十、常量</strong></h1><p>在程序执行过程中，值不发生改变的量称为常量。</p><p>mtianyan: C语言的常量可以分为直接常量和符号常量。</p><p>直接常量也称为字面量，是可以直接拿来使用，无需说明的量，比如：</p><ul><li>整型常量：13、0、-13；</li><li>实型常量：13.33、-24.4；</li><li>字符常量：‘a’、‘M’</li><li>字符串常量：”I love imooc!”</li></ul><p><img src="https://img-blog.csdnimg.cn/img_convert/92d578afc9e5463821c5c9bacb4ffc54.png"></p><p>在C语言中，可以<strong>用一个标识符来表示一个常量，称之为符号常量。</strong>符号常量在<strong>使用之前必须先定义</strong>，其一般形式为</p><pre><code class="hljs">#define 标识符 常量值 #include &lt;stdio.h&gt;#define POCKETMONEY 10    //定义常量及常量值int main()&#123;    // POCKETMONEY = 12;  //小明私自增加零花钱对吗？    printf(&quot;小明今天又得到%d元零花钱\n&quot;, POCKETMONEY);    return 0;  &#125;</code></pre><p>符号常量不可以被改变。</p><h1 id="十一、自动类型转换"><a href="#十一、自动类型转换" class="headerlink" title="十一、自动类型转换"></a><strong>十一、自动类型转换</strong></h1><p>数据类型存在自动转换的情况.<br>自动转换发生在<strong>不同数据类型</strong>运算时，在编译的时候<strong>自动完成</strong>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cfb12365d13ecd8566a481b7e46155b4.png" alt="自动转换"></p><p><code>char</code>类型数据转换为<code>int</code>类型数据遵循<code>ASCII</code>码中的对应值.</p><p><strong>注:</strong></p><blockquote><p>字节小的可以向字节大的自动转换，但字节大的不能向字节小的自动转换</p></blockquote><blockquote><p>char可以转换为int，int可以转换为double，char可以转换为double。但是不可以反向。</p></blockquote><h1 id="十二、强制类型转换"><a href="#十二、强制类型转换" class="headerlink" title="十二、强制类型转换"></a><strong>十二、强制类型转换</strong></h1><p>强制类型转换是通过<strong>定义类型转换运算</strong>来实现的。其一般形式为：</p><pre><code class="hljs">(数据类型) (表达式)</code></pre><p>其作用是把表达式的运算结果强制转换成类型说明符所表示的类型</p><p>在使用强制转换时应注意以下问题：</p><ul><li>数据类型和表达式都必须加括号, 如把(int)(x&#x2F;2+y)写成(int)x&#x2F;2+y则成了把x转换成int型之后再除2再与y相加了。</li><li>转换后不会改变原数据的类型及变量值，只在本次运算中临时性转换。</li><li>强制转换后的运算结果不遵循四舍五入原则。</li></ul><h1 id="十三、运算符号"><a href="#十三、运算符号" class="headerlink" title="十三、运算符号"></a><strong>十三、运算符号</strong></h1><p>C语言中运算符:</p><h3 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a><strong>1.算术运算符</strong></h3><p>c语言<strong>基本运算符:</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/c5a749723e3021d8ed30a6b8398cca07.png" alt="基本算术运算符"></p><h3 id="2-自增与自减运算符"><a href="#2-自增与自减运算符" class="headerlink" title="2.自增与自减运算符"></a><strong>2.自增与自减运算符</strong></h3><ul><li>自增运算符为<code>++</code>，其功能是使变量的值自增1</li><li>自减运算符为<code>--</code>，其功能是使变量值自减1。</li></ul><p>它们经常使用在循环中。自增自减运算符有以下几种形式：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c15ab00697b1fc3a4441b8cd141ddcda.png" alt="自增自减"></p><h3 id="3-赋值运算符"><a href="#3-赋值运算符" class="headerlink" title="3.赋值运算符"></a><strong>3.赋值运算符</strong></h3><p>C语言中赋值运算符分为<strong>简单赋值运算符</strong>和<strong>复合赋值运算符</strong></p><p>简单赋值运算符<code>=</code>号了，下面讲一下复合赋值运算符：</p><p>复合赋值运算符就是在简单赋值符<code>=</code>之前加上其它运算符构成.</p><p>注意：复合运算符中<strong>运算符和等号</strong>之间是<strong>不存在空格</strong>的。</p><h3 id="4-关系运算符"><a href="#4-关系运算符" class="headerlink" title="4.关系运算符"></a><strong>4.关系运算符</strong></h3><p>C语言中的<strong>关系运算符</strong>:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2284be0aca9664f780fb6e55e2e2a77f.png" alt="关系运算符"></p><p>关系表达式的值是<code>真</code>和<code>假</code>，在C程序用整数<code>1</code>和<code>0</code>表示。</p><p>注意：<code>&gt;=, &lt;=, ==, !=</code>这种符号之间<strong>不能存在空格</strong>。</p><h3 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a><strong>5.逻辑运算符</strong></h3><p>C语言中的逻辑运算符:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/66c97984dfde569fbfbd426743f50697.png" alt="逻辑运算符"></p><h3 id="6-三目运算符"><a href="#6-三目运算符" class="headerlink" title="6.三目运算符"></a><strong>6.三目运算符</strong></h3><p>C语言中的三目运算符：<code>?:</code>，其格式为：</p><p>表达式1 ? 表达式2 : 表达式3; <br>执行过程是：</p><p>先判断表达式1的值是否为真，如果是真的话执行表达式2；如果是假的话执行表达式3。</p><h3 id="7-运算符大比拼之优先级比较"><a href="#7-运算符大比拼之优先级比较" class="headerlink" title="7.运算符大比拼之优先级比较"></a><strong>7.运算符大比拼之优先级比较</strong></h3><p>各种运算符号的顺序:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/20e9c2e337b881c67d216afe05a275fd.png" alt="运算符的优先级"></p><p><strong>优先级别为1的优先级最高</strong>，优先级别为10的优先级别最低。</p><h1 id="十四、分支结构"><a href="#十四、分支结构" class="headerlink" title="十四、分支结构"></a><strong>十四、</strong>分支结构</h1><h3 id="1-简单if语句"><a href="#1-简单if语句" class="headerlink" title="1.简单if语句"></a><strong>1.简单if语句</strong></h3><p>C语言中的分支结构语句中的<code>if条件</code>语句。</p><p>简单if语句的基本结构如下：</p><pre><code class="hljs">if(表达式)&#123;执行代码块;&#125;</code></pre><p>其语义是：如果表达式的值为真，则执行其后的语句，否则不执行该语句。</p><p>注意：<code>if()</code>后面没有分号，直接写<code>&#123;&#125;</code></p><h3 id="2-if-else语句"><a href="#2-if-else语句" class="headerlink" title="2.if-else语句"></a><strong>2.if-else语句</strong></h3><p>简单的<code>if-else</code>语句的基本结构:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9f4e1154bd08cdc120a17fa43bc3c148.png" alt="if-else"></p><p>语义是: 如果表达式的值为真，则执行代码块1，否则执行代码块2。</p><h3 id="3-多重if-else语句"><a href="#3-多重if-else语句" class="headerlink" title="3.多重if-else语句"></a><strong>3.多重if-else语句</strong></h3><p>C语言中多重<code>if-else</code>语句，其结构如下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/8954da6add025070737fc88a22d15c51.png"></p><p>语义是：依次判断表达式的值，当出现某个值为真时，则执行对应代码块，否则执行代码块n。</p><p>注意：<strong>当某一条件为真的时候，则不会向下执行该分支结构的其他语句。</strong></p><h3 id="4-嵌套if-else语句"><a href="#4-嵌套if-else语句" class="headerlink" title="4.嵌套if-else语句"></a><strong>4.嵌套if-else语句</strong></h3><p>C语言中嵌套<code>if-else</code>语句。嵌套<code>if-else</code>语句的意思，就是在<code>if-else</code>语句中，再写<code>if-else</code>语句。其一般形式为：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/0a45e102a3e2ed9620467210945a9d31.png"></p><h1 id="十五、循环结构"><a href="#十五、循环结构" class="headerlink" title="十五、循环结构"></a><strong>十五、循环结构</strong></h1><h3 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1.while循环"></a><strong>1.while循环</strong></h3><p>反复不停的执行某个动作就是江湖人称的<strong>循环</strong> 。</p><p>C语言中有<strong>三种</strong>循环结构,先看一下C语言while循环的结构</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6aca4c32348ba0d41fd50a935509acba.png"></p><p>其中表达式表示循环条件，执行代码块为循环体。</p><p>while语句的语义是：计算表达式的值，当值为真(非0)时， 执行循环体代码块。</p><ul><li>while语句中的表达式一般是关系表达或逻辑表达式，当表达式的值为假时不执行循环体，反之则循环体一直执行。</li><li>一定要记着在循环体中改变循环变量的值，否则会出现死循环（无休止的执行）。</li><li>循环体如果包括有一个以上的语句，则必须用{}括起来，组成复合语句。</li></ul><h3 id="2-do-while循环"><a href="#2-do-while循环" class="headerlink" title="2.do-while循环"></a><strong>2.do-while循环</strong></h3><p>C语言中的<code>do-while</code>循环，一般形式如下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a7a058fe4a940281c74ec56aec2cdc1b.png"></p><p>do-while循环语句的语义是:</p><p>它先执行循环中的执行代码块，然后再判断while中表达式是否为真，如果为真则继续循环；如果为假，则终止循环。因此，do-while循环至少要执行一次循环语句。</p><p><strong>注意：mtianyan: 使用do-while结构语句时，while括号后必须有分号。</strong></p><h3 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3.for循环"></a><strong>3.for循环</strong></h3><p>c语言中<strong>for循环</strong>一般形式：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/430553d5465ac53be4cbfb4c0e2482a7.png"></p><p>它的执行过程如下：</p><ul><li>执行表达式1，对循环变量做初始化；</li><li>判断表达式2，若其值为真(非0)，则执行for循环体中执行代码块，然后向下执行；若其值为假(0)，则结束循环;</li><li>执行表达式3，(i++)等对于循环变量进行操作的语句;</li><li>执行for循环中执行代码块后执行第二步;第一步初始化只会执行一次。</li><li>循环结束，程序继续向下执行。</li></ul><p><strong>注意：for循环中的两个分号一定要写</strong></p><p><strong>在for循环中:</strong></p><ul><li>表达式1是一个或多个赋值语句，它用来控制变量的初始值；</li><li>表达式2是一个关系表达式，它决定什么时候退出循环；</li><li>表达式3是循环变量的步进值，定义控制循环变量每循环一次后按什么方式变化。</li><li>这三部分之间用分号 ; 分开。</li></ul><p>使用for语句应该注意：</p><ul><li>for循环中的“表达式1、2、3”均可不写为空，但两个分号(;;)不能缺省。</li><li>省略“表达式1（循环变量赋初值）”，表示不对循环变量赋初始值。</li><li>省略“表达式2(循环条件)”，不做其它处理，循环一直执行（死循环）。</li><li>省略“表达式3(循环变量增减量)”，不做其他处理，循环一直执行（死循环）。</li><li>表达式1可以是设置循环变量的初值的赋值表达式，也可以是其他表达式。</li><li>表达式1和表达式3可以是一个简单表达式也可以是多个表达式以逗号分割。</li><li>表达式2一般是<strong>关系表达式</strong>或<strong>逻辑表达式</strong>，但也可是数值表达式或字符表达式，<strong>只要其值非零</strong>，就执行循环体。</li><li>各表达式中的变量一定要在for循环<strong>之前定义</strong>。</li></ul><h3 id="3-三种循环比较"><a href="#3-三种循环比较" class="headerlink" title="3.三种循环比较"></a><strong>3.三种循环比较</strong></h3><p>while, do-while和for三种循环在具体的使用场合上是有区别的，如下：</p><ul><li>在知道循环次数的情况下更适合使用for循环;</li><li>在不知道循环次数的情况下适合使用while或者do-while循环:</li><li>如果有可能一次都不循环应考虑使用while循环</li><li>如果至少循环一次应考虑使用do-while循环。</li><li>但是从本质上讲，while,do-while和for循环之间是可以相互转换的。</li></ul><h3 id="4-多重循环"><a href="#4-多重循环" class="headerlink" title="4.多重循环"></a><strong>4.多重循环</strong></h3><p>多重循环就是在循环结构的循环体中又出现循环结构。</p><p>在实际开发中一般最多用到三层重循环。</p><p>因为循环层数越多，运行时间越长，程序越复杂，所以一般用2-3层多重循环就可以了。另外不同循环之间也是可以嵌套的。</p><p>多重循环在执行的过程中，外层循环为父循环，内层循环为子循环，</p><p>**父循环一次，子循环需要全部执行完，直到跳出循环。**父循环再进入下一次，子循环继续执行…<br><img src="https://img-blog.csdnimg.cn/img_convert/c2ffeccf9477890c17d9b815100c0888.png"></p><h1 id="十六、结束语句"><a href="#十六、结束语句" class="headerlink" title="十六、结束语句"></a><strong>十六、结束语句</strong></h1><h3 id="1-break语句"><a href="#1-break语句" class="headerlink" title="1.break语句"></a><strong>1.break语句</strong></h3><p>那么循环5次的时候，需要中断不继续训练。在C语言中，可以使用<code>break</code>语句进行该操作.</p><p>使用<code>break</code>语句时注意以下几点：</p><ul><li>在没有循环结构的情况下，break不能用在单独的if-else语句中。</li><li>在多层循环中，一个break语句只跳出当前循环。</li></ul><h3 id="2-continue语句"><a href="#2-continue语句" class="headerlink" title="2.continue语句"></a><strong>2.continue语句</strong></h3><p>那么循环5次的时候，需要中断后继续训练。在C语言中，可以使用continue语句进行该操作</p><p>continue语句的作用是结束本次循环开始执行下一次循环。</p><p>break语句与continue语句的区别是:</p><p>break是跳出当前整个循环，continue是结束本次循环开始下一次循环。</p><h1 id="十七、局部与全局"><a href="#十七、局部与全局" class="headerlink" title="十七、局部与全局"></a><strong>十七、局部与全局</strong></h1><p>C语言中的变量，按作用域范围可分为两种，即局部变量和全局变量。局部变量也称为内部变量。局部变量是在函数内作定义说明的。其作用域仅限于函数内， 离开该函数后再使用这种变量是非法的。在复合语句中也可定义变量，其作用域只在复合语句范围内。<br>全局变量也称为外部变量，它是在函数外部定义的变量。它不属于哪一个函数，它属于一个源程序文件。其作用域是整个源程序。</p><h1 id="十八、变量存储类别"><a href="#十八、变量存储类别" class="headerlink" title="十八、变量存储类别"></a><strong>十八、变量存储类别</strong></h1><p>mtianyan: C语言根据变量的生存周期来划分，可以分为静态存储方式和动态存储方式。</p><p>静态存储方式：是指在程序运行期间分配固定的存储空间的方式。静态存储区中存放了在整个程序执行过程中都存在的变量，如全局变量。<br>动态存储方式：是指在程序运行期间根据需要进行动态的分配存储空间的方式。动态存储区中存放的变量是根据程序运行的需要而建立和释放的，通常包括：函数形式参数；自动变量；函数调用时的现场保护和返回地址等。<br>C语言中存储类别又分为四类：</p><ul><li>自动（auto）、</li><li>静态（static）、</li><li>寄存器的（register）</li><li>外部的（extern）。</li></ul><h1 id="十九、内部函数与外部函数"><a href="#十九、内部函数与外部函数" class="headerlink" title="十九、内部函数与外部函数"></a><strong>十九、内部函数与外部函数</strong></h1><p>在C语言中不能被其他源文件调用的函数称谓内部函数 ，内部函数由static关键字来定义，因此又被称谓静态函数，形式为：<br>static [数据类型] 函数名（[参数]）<br>这里的static是对函数的作用范围的一个限定，限定该函数只能在其所处的源文件中使用，因此在不同文件中出现相同的函数名称的内部函数是没有问题的。<br>在C语言中能被其他源文件调用的函数称谓外部函数 ，外部函数由extern关键字来定义，形式为：<br>extern [数据类型] 函数名([参数])<br>C语言规定，在没有指定函数的作用范围时，系统会默认认为是外部函数，因此当需要定义外部函数时extern也可以省略。<br>静态变量只赋值一次</p><h1 id="二十、数组初体验"><a href="#二十、数组初体验" class="headerlink" title="二十、数组初体验"></a><strong>二十、数组初体验</strong></h1><p>程序中也需要容器，只不过该容器有点特殊，它在程序中是一块<strong>连续的，大小固定并且里面的数据类型一致的内存空间</strong>，它还有个好听的名字叫数组。可以将数组理解为大小固定，所放物品为同类的一个购物袋，在该购<br>物袋中的物品是按一定顺序放置的。</p><h3 id="1-我们来看一下如何声明一个数组："><a href="#1-我们来看一下如何声明一个数组：" class="headerlink" title="1.我们来看一下如何声明一个数组："></a><strong>1.我们来看一下如何声明一个数组：</strong></h3><p><strong><em>数据类型 数组名称[长度];</em></strong></p><p>数组只声明也不行啊，看一下数组是如何初始化的。说到初始化，C语言中的数组初始化是有三种形式的，分别是：</p><ul><li>数据类型 数组名称[长度n] &#x3D; {元素1,元素2…元素n};</li><li>数据类型 数组名称[] &#x3D; {元素1,元素2…元素n};</li><li>数据类型 数组名称[长度n]; 数组名称[0] &#x3D; 元素1; 数组名称[1] &#x3D; 元素2; 数组名称[n-1] &#x3D; 元素n;</li></ul><p>我们将数据放到数组中之后又如何获取数组中的元素呢？</p><p>获取数组元素时： 数组名称[元素所对应下标];</p><p>如：初始化一个数组 int arr[3] &#x3D; {1,2,3}; 那么arr[0]就是元素1。</p><p>注意：</p><p>数组的下标均以0开始；<br>数组在初始化的时候，数组内元素的个数不能大于声明的数组长度；<br>mtianyan: 如果采用第一种初始化方式，元素个数小于数组的长度时，多余的数组元素初始化为0；<br>在声明数组后没有进行初始化的时候，静态（static）和外部（extern）类型的数组元素初始化元素为0，自动（auto）类型的数组的元素初始化值不确定。</p><h3 id="2-数组的遍历"><a href="#2-数组的遍历" class="headerlink" title="2.数组的遍历"></a><strong>2.数组的遍历</strong></h3><p>数组就可以采用循环的方式将每个元素遍历出来，而不用人为的每次获取指定某个位置上的元素，例如我们用for循环遍历一个数组：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/48a9ac2856ddcb42f8681d347eac4dce.png"></p><p>注意以下几点：</p><ul><li>最好<strong>避免出现数组越界访问</strong>，循环变量最好不要超出数组的长度.</li><li><strong>C语言的数组长度一经声明，长度就是固定，无法改变</strong>，并且<strong>C语言并不提供计算数组长度的方法</strong>。</li></ul><p>由于C语言是没有检查数组长度改变或者数组越界的这个机制，可能会在编辑器中编译并通过，但是结果就不能肯定了，因此还是不要越界或者改变数组的长度</p><h3 id="3-数组作为函数参数"><a href="#3-数组作为函数参数" class="headerlink" title="3.数组作为函数参数"></a><strong>3.数组作为函数参数</strong></h3><p>数组可以由整个数组当作函数的参数，也可以由数组中的某个元素当作函数的参数：</p><p>整个数组当作函数参数，即把<strong>数组名称传入函数</strong>中，例如：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fb1c19aa6809cde4052552f8deff6b87.png"></p><p>数组中的元素当作函数参数，即把数组中的参数传入函数中，例如：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/06a5d10b5f285b14c115df84c7c3e04c.png"></p><p>数组作为函数参数时注意以下事项：</p><ul><li>数组名作为函数实参传递时，函数定义处作为接收参数的数组类型形参既可以指定长度也可以不指定长度。</li><li>数组元素作为函数实参传递时，数组元素类型必须与形参数据类型一致。</li></ul><h3 id="4-字符串与数组"><a href="#4-字符串与数组" class="headerlink" title="4.字符串与数组"></a><strong>4.字符串与数组</strong></h3><p>C语言中，是没有办法直接定义字符串数据类型的，但是我们可以使用数组来定义我们所要的字符串。一般有以下两种格式：</p><ul><li>char 字符串名称[长度] &#x3D; “字符串值”;</li><li>char 字符串名称[长度] &#x3D; {‘字符1’,‘字符2’,…,‘字符n’,’\0’};</li></ul><p>注意：</p><ul><li>[]中的长度是可以省略不写的；</li><li>采用第2种方式的时候最后一个元素必须是’\0’，’\0’表示字符串的结束标志；</li><li>采用第2种方式的时候在数组中不能写中文。</li><li>在输出字符串的时候要使用：printf(“%s”,字符数组名字);或者puts(字符数组名字);。</li></ul><h3 id="5-mtianyan-字符串函数"><a href="#5-mtianyan-字符串函数" class="headerlink" title="5.mtianyan:字符串函数"></a><strong>5.mtianyan:字符串函数</strong></h3><p>常用的字符串函数如下(strlen,strcmp,strcpy,strcat,atoi):</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c4eff5a2540f8cb3b8f53a556167ad90.png" alt="字符串函数"></p><p>使用字符串函数注意以下事项：</p><ul><li>strlen()获取字符串的长度，在字符串长度中是不包括‘\0’而且汉字和字母的长度是不一样的</li><li>strcmp()在比较的时候会把字符串先转换成ASCII码再进行比较,返回的结果为0表示s1和s2的ASCII码相等,返回结果为1表示s1比s2的ASCII码大,返回结果为-1表示s1比s2的ASCII码小</li><li>strcpy()拷贝之后会覆盖原来字符串且不能对字符串常量进行拷贝</li><li>strcat在使用时s1与s2指的内存空间不能重叠，且s1要有足够的空间来容纳要复制的字符串</li></ul><h3 id="6-多维数组"><a href="#6-多维数组" class="headerlink" title="6.多维数组"></a><strong>6.多维数组</strong></h3><p>多维数组的定义格式是：<br>数据类型 数组名称[常量表达式1][常量表达式2]…[常量表达式n];</p><p><img src="https://img-blog.csdnimg.cn/img_convert/2d7933da5cdb5d38fe2854cb069c2886.png"></p><p>定义了一个名称为num，数据类型为int的二维数组。其中第一个[3]表示第一维下标的长度，就像购物时分类存放的购物；第二个[3]表示第二维下标的长度，就像每个购物袋中的元素。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/97c462550ab6e08abb55f5fb52fac245.png" alt="矩阵"></p><p>多维数组的初始化与一维数组的初始化类似也是分两种：</p><pre><code class="hljs">数据类型 数组名称\[常量表达式1\]\[常量表达式2\]…\[常量表达式n\] = &#123;&#123;值1,…,值n&#125;,&#123;值1,…,值n&#125;,…,&#123;值1,…,值n&#125;&#125;;数据类型 数组名称\[常量表达式1\]\[常量表达式2\]…\[常量表达式n\]; 数组名称\[下标1\]\[下标2\]…\[下标n\] = 值;</code></pre><p>多维数组初始化要注意以下事项：</p><ul><li>采用第一种始化时数组声明必须指定列的维数。<strong>mtianyan: 因为系统会根据数组中元素的总个数来分配空间，当知道元素总个数以及列的维数后，会直接计算出行的维数；</strong></li><li>采用第二种初始化时数组声明必须同时指定行和列的维数。</li></ul><p><strong>二维数组定义的时候，可以不指定行的数量，但是必须指定列的数量</strong></p><h1 id="二十一、C语言最核心的指针"><a href="#二十一、C语言最核心的指针" class="headerlink" title="二十一、C语言最核心的指针"></a><strong>二十一、</strong>C语言最核心的指针</h1><p>说到指针，就不可能脱离开内存，学会指针的人分为两种，一种是不了解内存模型，另外一种则是了解。</p><p>不了解的对指针的理解就停留在“指针就是变量的地址”这句话，会比较害怕使用指针，特别是各种高级操作。</p><p>而了解内存模型的则可以把指针用得炉火纯青！</p><p><strong>想学好C语言，很关键就是搞懂内存、指针、还有各种编译链接，</strong></p><h3 id="1、内存本质"><a href="#1、内存本质" class="headerlink" title="1、内存本质"></a><strong>1、内存本质</strong></h3><p>编程的本质其实就是操控数据，数据存放在内存中。</p><p>因此，如果能更好地理解内存的模型，以及 C 如何管理内存，就能对程序的工作原理洞若观火，从而使编程能力更上一层楼。</p><p>大家真的别认为这是空话，我大一整年都不敢用 C 写上千行的程序也很抗拒写 C。</p><p>因为一旦上千行，经常出现各种莫名其妙的内存错误，一不小心就发生了 coredump…… 而且还无从排查，分析不出原因。</p><p>相比之下，那时候最喜欢 Java，在 Java 里随便怎么写都不会发生类似的异常，顶多偶尔来个 <strong>NullPointerException</strong>，也是比较好排查的。</p><p>直到后来对内存和指针有了更加深刻的认识，才慢慢会用 C 写上千行的项目，也很少会再有内存问题了。（过于自信</p><p>「指针存储的是变量的内存地址」这句话应该任何讲 C 语言的书都会提到吧。</p><p>所以，要想彻底理解指针，首先要理解 C 语言中变量的存储本质，也就是内存。</p><p><strong>（1）内存编址</strong></p><p>计算机的内存是一块用于存储数据的空间，由一系列连续的存储单元组成，就像下面这样，<br><img src="https://img-blog.csdnimg.cn/img_convert/787c0fd1ec330ab848cae3ac64b5ab53.png" alt="å¾ç"></p><p>每一个单元格都表示 1 个 Bit，一个 bit 在 EE 专业的同学看来就是高低电位，而在 CS 同学看来就是 0、1 两种状态。</p><p>由于 1 个 bit 只能表示两个状态，所以大佬们规定 8个 bit 为一组，命名为 byte。</p><p>并且将 byte 作为内存寻址的最小单元，也就是给每个 byte 一个编号，这个编号就叫内存的<strong>地址</strong>。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/658a189af59dd0e0aa44f4d82086b575.png" alt="å¾ç"></p><p>这就相当于，我们给小区里的每个单元、每个住户都分配一个门牌号，在生活中，我们需要保证门牌号唯一，这样就能通过门牌号很精准的定位到一家人。</p><p>同样，在计算机中，我们也要保证给每一个 byte 的编号都是唯一的，这样才能够保证每个编号都能访问到唯一确定的 byte。</p><p><strong>（2）内存地址空间</strong></p><p>上面我们说给内存中每个 byte 唯一的编号，那么这个编号的范围就决定了计算机可寻址内存的范围。</p><p>所有编号连起来就叫做内存的地址空间，这和大家平时常说的电脑是 32 位还是 64 位有关。</p><p>早期 Intel 8086、8088 的 CPU 就是只支持 16 位地址空间，<strong>寄存器</strong>和<strong>地址总线</strong>都是 16 位，这意味着最多对 <code>2^16 = 64 Kb</code> 的内存编号寻址。</p><p>这点内存空间显然不够用，后来，80286 在 8086 的基础上将<strong>地址总线</strong>和<strong>地址寄存器</strong>扩展到了20 位，也被叫做 A20 地址总线。</p><p>当时在写 mini os 的时候，还需要通过 BIOS 中断去启动 A20 地址总线的开关。</p><p>但是，现在的计算机一般都是 32 位起步了，32 位意味着可寻址的内存范围是 <code>2^32 byte = 4GB</code>。</p><p>所以，如果你的电脑是 32 位的，那么你装超过 4G 的内存条也是无法充分利用起来的。</p><p>好了，这就是内存和内存编址。</p><p><strong>（3）变量的本质</strong></p><p>有了内存，接下来我们需要考虑，int、double 这些变量是如何存储在 0、1 单元格的。</p><p>在 C 语言中我们会这样定义变量：</p><pre><code class="hljs">int a = 999;char c = &#39;c&#39;;</code></pre><p>当你写下一个变量定义的时候，实际上是向内存申请了一块空间来存放你的变量。</p><p>我们都知道 int 类型占 4 个字节，并且在计算机中数字都是用补码（不了解补码的记得去百度）表示的。</p><p>999 换算成补码就是：0000 0011 1110 0111</p><p>这里有 4 个byte，所以需要四个单元格来存储：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/24e6d3c7bd14792eeaf1539c4ba58a71.png" alt="å¾ç"></p><p>有没有注意到，我们把高位的字节放在了低地址的地方，那能不能反过来呢？</p><p>当然，这就引出了<strong>大端和小端。</strong></p><p>像上面这种将高位字节放在内存低地址的方式叫做<strong>大端</strong>，反之，将低位字节放在内存低地址的方式就叫做<strong>小端。</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/4b3a08d6bbc4b10880f6aeb53988663f.png" alt="图片"></p><p>上面只说明了 int 型的变量如何存储在内存，而 float、char 等类型实际上也是一样的，都需要先转换为补码。</p><p>对于多字节的变量类型，还需要按照大端或者小端的格式，依次将字节写入到内存单元。</p><p>记住上面这两张图，这就是编程语言中所有变量的在内存中的样子，不管是 int、char、指针、数组、结构体、对象… 都是这样放在内存的。</p><h3 id="2、指针是什么啥？"><a href="#2、指针是什么啥？" class="headerlink" title="2、指针是什么啥？"></a><strong>2、指针是什么啥？</strong></h3><p> 变量放在哪？上面我说，定义一个变量实际就是向计算机申请了一块内存来存放。</p><p>那如果我们要想知道变量到底放在哪了呢？可以通过运算符<code>&amp;</code>来取得变量实际的地址，这个值就是变量所占内存块的起始地址。</p><p>PS: 实际上这个地址是虚拟地址，并不是真正物理内存上的地址</p><p>我们可以把这个地址打印出来</p><pre><code class="hljs">printf(&quot;%x&quot;, &amp;a);</code></pre><p>大概会是像这样的一串数字:0x7ffcad3b8f3c</p><p>上面说，我们可以通过<code>&amp;</code>符号获取变量的内存地址，那获取之后如何来表示这是一个<strong>地址</strong>，而不是一个普通的值呢？</p><p><strong>也就是在 C 语言中如何表示地址这个概念呢？</strong></p><p>对，就是指针，你可以这样</p><pre><code class="hljs">int *pa = &amp;a; </code></pre><p>pa 中存储的就是变量 a 的地址，也叫做指向 a 的指针。</p><p>在这里我想谈几个看起来有点无聊的话题：</p><blockquote><p>为什么我们需要指针？直接用变量名不行吗？</p></blockquote><p>当然可以，但是变量名是有局限的。</p><blockquote><p>变量名的本质是什么？</p></blockquote><p>是变量地址的符号化，变量是为了让我们编程时更加方便，对人友好，可计算机可不认识什么变量 a，它只知道地址和指令。</p><p>所以当你去查看 C 语言编译后的汇编代码，就会发现变量名消失了，取而代之的是一串串抽象的地址。</p><p>你可以认为，编译器会自动维护一个映射，将我们程序中的变量名转换为变量所对应的地址，然后再对这个地址去进行读写。</p><p>也就是有这样一个映射表存在，将变量名自动转化为地址：</p><pre><code class="hljs"> a  | 0x7ffcad3b8f3cc  | 0x7ffcad3b8f2ch  | 0x7ffcad3b8f4c....</code></pre><p>说的好！</p><p>可是我还是不知道指针存在的必要性，那么问题来了，看下面代码:</p><pre><code class="hljs">int func(...) &#123;  ... &#125;; int main() &#123; int a; func(...);&#125;;</code></pre><p>假设我有一个需求：</p><blockquote><p>要求在<code>func</code> 函数里要能够修改 <code>main</code> 函数里的变量 <code>a</code>，这下咋整，在 <code>main</code> 函数里可以直接通过变量名去读写 <code>a</code> 所在内存。</p><p>但是在 <code>func</code> 函数里是看不见<code>a</code> 的呀。</p></blockquote><p>你说可以通过<code>&amp;</code>取地址符号，将 <code>a</code> 的地址传递进去：</p><pre><code class="hljs">int func(int address) &#123;  ....&#125;; int main() &#123; int a; func(&amp;a);&#125;;</code></pre><p>这样在<code>func</code> 里就能获取到 <code>a</code> 的地址，进行读写了。</p><p>理论上这是完全没有问题的，但是问题在于:</p><p>编译器该如何区分一个 int 里你存的到底是 int 类型的值，还是另外一个变量的地址（即指针）。</p><p>这如果完全靠我们编程人员去人脑记忆了，会引入复杂性，并且无法通过编译器检测一些语法错误。</p><p>而通过<code>int *</code> 去定义一个指针变量，会非常明确：<strong>这就是另外一个 int 型变量的地址。</strong></p><p>编译器也可以通过类型检查来排除一些编译错误。</p><p>这就是指针存在的必要性。</p><p>实际上任何语言都有这个需求，只不过很多语言为了安全性，给指针戴上了一层枷锁，将指针包装成了引用。</p><p>可能大家学习的时候都是自然而然的接受指针这个东西，但是还是希望这段啰嗦的解释对你有一定启发。</p><p>同时，在这里提点小问题：</p><p>既然指针的本质都是变量的内存首地址，即一个 int 类型的整数。</p><blockquote><p>那为什么还要有各种类型呢？</p></blockquote><blockquote><p>比如 int 指针，float 指针，这个类型影响了指针本身存储的信息吗？</p></blockquote><blockquote><p>这个类型会在什么时候发挥作用？</p></blockquote><p><strong>解引用</strong></p><p>上面的问题，就是为了引出指针解引用的。</p><p><code>pa</code>中存储的是<code>a</code>变量的内存地址，那如何通过地址去获取<code>a</code>的值呢？</p><p>这个操作就叫做<strong>解引用</strong>，在 C 语言中通过运算符 <code>*</code>就可以拿到一个指针所指地址的内容了。</p><p>比如<code>*pa</code>就能获得<code>a</code>的值。</p><p>我们说指针存储的是变量内存的首地址，那编译器怎么知道该从首地址开始取多少个字节呢？</p><p>这就是指针类型发挥作用的时候，编译器会根据指针的所指元素的类型去判断应该取多少个字节。</p><p>如果是 int 型的指针，那么编译器就会产生提取四个字节的指令，char 则只提取一个字节，以此类推。</p><p>下面是指针内存示意图:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b7adb5cd7d21d6af8e90892065f5de9f.png" alt="å¾ç"></p><p><code>pa</code> 指针首先是一个变量，它本身也占据一块内存，这块内存里存放的就是 <code>a</code> 变量的首地址。</p><p>当解引用的时候，就会从这个首地址连续划出 4 个 byte，然后按照 int 类型的编码方式解释。</p><p>别看这个地方很简单，但却是深刻理解指针的关键。</p><p>举两个例子来详细说明：</p><p>比如：</p><pre><code class="hljs">float f = 1.0;short c = *(short*)&amp;f; </code></pre><p>你能解释清楚上面过程，对于 <code>f</code> 变量，在内存层面发生了什么变化吗？或者 <code>c</code> 的值是多少？1 ？</p><p>实际上，从内存层面来说，<code>f</code> 什么都没变。</p><p>如图:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/78e482f1fbf69725fd555cc06226bc40.png" alt="图片"></p><p>假设这是<code>f</code> 在内存中的位模式，这个过程实际上就是把 <code>f</code> 的前两个 byte 取出来然后按照 short 的方式解释，然后赋值给 <code>c</code>。</p><p>详细过程如下：</p><pre><code class="hljs">&amp;f取得f 的首地址(short*)&amp;f</code></pre><p>上面第二步什么都没做，这个表达式只是说 ：</p><p>“噢，我认为<code>f</code>这个地址放的是一个 short 类型的变量”</p><p>最后当去解引用的时候<code>*(short*)&amp;f</code>时，编译器会取出前面两个字节，并且按照 short 的编码方式去解释，并将解释出的值赋给 <code>c</code> 变量。</p><p>这个过程 <code>f</code>的位模式没有发生任何改变，变的只是解释这些位的方式。</p><p>当然，这里最后的值肯定不是 1，至于是什么，大家可以去真正算一下。</p><p>那反过来，这样呢？</p><pre><code class="hljs">short c = 1;float f = *(float*)&amp;c;</code></pre><p>如图：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/74cae1e9f017cf678478bc0f669bfe7f.png" alt="图片"></p><p>具体过程和上述一样，但上面肯定不会报错，这里却不一定。</p><p>为什么？</p><p><code>(float*)&amp;c</code>会让我们从<code>c</code>  的首地址开始取四个字节，然后按照 float 的编码方式去解释。</p><p>但是<code>c</code>是 short 类型只占两个字节，那肯定会访问到相邻后面两个字节，这时候就发生了内存访问越界。</p><p>当然，如果只是读，大概率是没问题的。</p><p>但是，有时候需要向这个区域写入新的值，比如：</p><pre><code class="hljs">*(float*)&amp;c = 1.0;</code></pre><p>那么就可能发生 coredump，也就是访存失败。</p><p>另外，就算是不会 coredump，这种也会破坏这块内存原有的值，因为很可能这是是其它变量的内存空间，而我们去覆盖了人家的内容，肯定会导致隐藏的 bug。</p><p>如果你理解了上面这些内容，那么使用指针一定会更加的自如。</p><h3 id="3、结构体和指针"><a href="#3、结构体和指针" class="headerlink" title="3、结构体和指针"></a><strong>3、结构体和指针</strong></h3><p>结构体内包含多个成员，这些成员之间在内存中是如何存放的呢？</p><p>比如：</p><pre><code class="hljs">struct fraction &#123; int num; // 整数部分 int denom; // 小数部分&#125;; struct fraction fp;fp.num = 10;fp.denom = 2;</code></pre><p>这是一个定点小数结构体，它在内存占 8 个字节（这里不考虑内存对齐），两个成员域是这样存储的：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/69db5aade4b16bcf971ba665881e9227.png" alt="图片"></p><p>我们把 10 放在了结构体中基地址偏移为 0 的域，2 放在了偏移为 4 的域。</p><p>接下来我们做一个这样的操作：</p><pre><code class="hljs">((fraction*)(&amp;fp.denom))-&gt;num = 5; ((fraction*)(&amp;fp.denom))-&gt;denom = 12; printf(&quot;%d\n&quot;, fp.denom); // 输出多少？</code></pre><p>上面这个究竟会输出多少呢？自己先思考下噢~</p><p>接下来我分析下这个过程发生了什么：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/201c2f76e0bb2719c9effdf6146aa3a8.png" alt="图片"></p><p>首先，<code>&amp;fp.denom</code>表示取结构体 fp 中 denom 域的首地址，然后以这个地址为起始地址取 8 个字节，并且将它们看做一个 fraction 结构体。</p><p>在这个新结构体中，最上面四个字节变成了 denom 域，而 fp 的 denom 域相当于新结构体的 num 域。</p><p>因此：</p><p><code>((fraction*)(&amp;fp.denom))-&gt;num = 5</code></p><p>实际上改变的是 <code>fp.denom</code>，而</p><p><code>((fraction*)(&amp;fp.denom))-&gt;denom = 12</code></p><p>则是将最上面四个字节赋值为 12。</p><p>当然，往那四字节内存写入值，结果是无法预测的，可能会造成程序崩溃，因为也许那里恰好存储着函数调用栈帧的关键信息，也可能那里没有写入权限。</p><p>大家初学 C 语言的很多 coredump 错误都是类似原因造成的。</p><p>所以最后输出的是 5。</p><p>为什么要讲这种看起来莫名其妙的代码？</p><p>就是为了说明结构体的本质其实就是一堆的变量打包放在一起，而访问结构体中的域，就是通过结构体的起始地址，也叫基地址，然后加上域的偏移。</p><p>其实，C++、Java 中的对象也是这样存储的，无非是他们为了实现某些面向对象的特性，会在数据成员以外，添加一些 Head 信息，比如C++ 的虚函数表。</p><p>实际上，我们是完全可以用 C 语言去模仿的。</p><p>这就是为什么一直说 C 语言是基础，你真正懂了 C 指针和内存，对于其它语言你也会很快的理解其对象模型以及内存布局。</p><h3 id="4、多级指针"><a href="#4、多级指针" class="headerlink" title="4、多级指针"></a><strong>4、多级指针</strong></h3><p>说起多级指针这个东西，我以前上学的时候最多理解到 2 级，再多真的会把我绕晕，经常也会写错代码。</p><p>你要是给我写个这个：<code>int ******p</code> 能把我搞崩溃，我估计很多同学现在就是这种情况🤣</p><p>其实，多级指针也没那么复杂，就是指针的指针的指针的指针……非常简单。</p><p>今天就带大家认识一下多级指针的本质。</p><p>首先，我要说一句话，没有多级指针这种东西，指针就是指针，多级指针只是为了我们方便表达而取的逻辑概念。</p><p>首先看下生活中的快递柜：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9992f7fe2f8c6f2d51fd56318d5a3be5.png"></p><p>这种大家都用过吧，每个格子都有一个编号，我们只需要拿到编号，然后就能找到对应的格子，取出里面的东西。</p><p>这里的格子就是内存单元，编号就是地址，格子里放的东西就对应存储在内存中的内容。</p><p>假设我把一本书，放在了 03 号格子，然后把 03 这个编号告诉你，你就可以根据 03 去取到里面的书。</p><p>那如果我把书放在 05 号格子，然后在 03 号格子只放一个小纸条，上面写着：「书放在 05 号」。</p><p>你会怎么做？</p><p>当然是打开 03 号格子，然后取出了纸条，根据上面内容去打开 05 号格子得到书。</p><p>这里的 03 号格子就叫指针，因为它里面放的是指向其它格子的小纸条（地址）而不是具体的书。</p><p>明白了吗？</p><p>那我如果把书放在 07 号格子，然后在 05 号格子 放一个纸条：「书放在 07号」，同时在03号格子放一个纸条「书放在 05号」</p><p><img src="https://img-blog.csdnimg.cn/img_convert/1eafacbbec3c29fb16f1342302a90a5a.png" alt="图片"></p><p>这里的 03 号格子就叫二级指针，05 号格子就叫指针，而 07 号就是我们平常用的变量。</p><p>依次，可类推出 N 级指针。</p><p>所以你明白了吗？同样的一块内存，如果存放的是别的变量的地址，那么就叫指针，存放的是实际内容，就叫变量。</p><pre><code class="hljs">int a;int *pa = &amp;a;int **ppa = &amp;pa;int ***pppa = &amp;ppa;</code></pre><p>上面这段代码，<code>pa</code>就叫一级指针，也就是平时常说的指针，<code>ppa</code> 就是二级指针。</p><p>内存示意图如下:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ea9a5559ddf7ce166518d4ab63a3542e.png" alt="图片"></p><p>不管几级指针有两个最核心的东西：</p><ul><li><p>指针本身也是一个变量，需要内存去存储，指针也有自己的地址</p></li><li><p>指针内存存储的是它所指向变量的地址</p></li></ul><p>这就是我为什么多级指针是逻辑上的概念，实际上一块内存要么放实际内容，要么放其它变量地址，就这么简单。</p><p>怎么去解读<code>int **a</code>这种表达呢？</p><p><code>int ** a</code> 可以把它分为两部分看，即<code>int*</code> 和 <code>*a</code>，后面 <code>*a</code> 中的<code>*</code>表示 <code>a</code> 是一个指针变量，前面的 <code>int*</code> 表示指针变量<code>a</code></p><p>只能存放 <code>int*</code> 型变量的地址。</p><p>对于二级指针甚至多级指针，我们都可以把它拆成两部分。</p><p>首先不管是多少级的指针变量，它首先是一个指针变量，指针变量就是一个<code>*</code>，其余的<code>*</code>表示的是这个指针变量只能存放什么类型变量的地址。</p><p>比如<code>int****a</code>表示指针变量 <code>a</code> 只能存放<code>int***</code> 型变量的地址。</p><h3 id="5、指针与数组"><a href="#5、指针与数组" class="headerlink" title="5、指针与数组"></a>5、指针与数组</h3><p><strong>（1）一维数组</strong></p><p>数组是 C 自带的基本数据结构，彻底理解数组及其用法是开发高效应用程序的基础。</p><p>数组和指针表示法紧密关联，在合适的上下文中可以互换。</p><p>如下：</p><pre><code class="hljs">int array[10] = &#123;10, 9, 8, 7&#125;;printf(&quot;%d\n&quot;, *array);  //  输出 10printf(&quot;%d\n&quot;, array[0]);  // 输出 10 printf(&quot;%d\n&quot;, array[1]);  // 输出 9printf(&quot;%d\n&quot;, *(array+1)); // 输出 9 int *pa = array;printf(&quot;%d\n&quot;, *pa);  //  输出 10printf(&quot;%d\n&quot;, pa[0]);  // 输出 10 printf(&quot;%d\n&quot;, pa[1]);  // 输出 9printf(&quot;%d\n&quot;, *(pa+1)); // 输出 9</code></pre><p>在内存中，数组是一块连续的内存空间：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d786deb2a7da1a5a81d0b77a56d5bebb.png" alt="图片"></p><p>第 0 个元素的地址称为数组的首地址，数组名实际就是指向数组首地址，当我们通过<code>array[1]</code>或者<code>*(array + 1)</code> 去访问数组元素的时候。</p><p>实际上可以看做 <code>address[offset]</code>，<code>address</code> 为起始地址，<code>offset</code> 为偏移量，但是注意这里的偏移量<code>offset</code> 不是直接和 <code>address</code>相加，而是要乘以数组类型所占字节数，也就是： <code>address + sizeof(int) * offset</code>。</p><p>学过汇编的同学，一定对这种方式不陌生，这是汇编中寻址方式的一种：基址变址寻址。</p><p>看完上面的代码，很多同学可能会认为指针和数组完全一致，可以互换，这是完全错误的。</p><p>尽管数组名字有时候可以当做指针来用，但数组的名字不是指针。</p><p>最典型的地方就是在 sizeof:</p><pre><code class="hljs">printf(&quot;%u&quot;, sizeof(array));printf(&quot;%u&quot;, sizeof(pa));</code></pre><p>第一个将会输出 40，因为 <code>array</code>包含有 10 个int类型的元素，而第二个在 32 位机器上将会输出 4，也就是指针的长度。</p><p>为什么会这样呢？</p><p>站在编译器的角度讲，变量名、数组名都是一种符号，它们都是有类型的，它们最终都要和数据绑定起来。</p><p>变量名用来指代一份数据，数组名用来指代一组数据（数据集合），它们都是有类型的，以便推断出所指代的数据的长度。</p><p>对，数组也有类型，我们可以将 int、float、char 等理解为基本类型，将数组理解为由基本类型派生得到的稍微复杂一些的类型，</p><p>数组的类型由元素的类型和数组的长度共同构成。而 <code>sizeof</code> 就是根据变量的类型来计算长度的，并且计算的过程是在编译期，而不会在程序运行时。</p><p>编译器在编译过程中会创建一张专门的表格用来保存变量名及其对应的数据类型、地址、作用域等信息。</p><p><code>sizeof</code> 是一个操作符，不是函数，使用 <code>sizeof</code> 时可以从这张表格中查询到符号的长度。</p><p>所以，这里对数组名使用<code>sizeof</code>可以查询到数组实际的长度。</p><p><code>pa</code> 仅仅是一个指向 int 类型的指针，编译器根本不知道它指向的是一个整数，还是一堆整数。</p><p>虽然在这里它指向的是一个数组，但数组也只是一块连续的内存，没有开始和结束标志，也没有额外的信息来记录数组到底多长。</p><p>所以对 <code>pa</code> 使用 <code>sizeof</code> 只能求得的是指针变量本身的长度。</p><p>也就是说，编译器并没有把 <code>pa</code> 和数组关联起来，<code>pa</code> 仅仅是一个指针变量，不管它指向哪里，<code>sizeof</code>求得的永远是它本身所占用的字节数。</p><p><strong>（2）二维数组</strong></p><p>大家不要认为二维数组在内存中就是按行、列这样二维存储的，实际上，不管二维、三维数组… 都是编译器的语法糖。</p><p>存储上和一维数组没有本质区别，举个例子：</p><pre><code class="hljs">int array[3][3] = &#123;&#123;1, 2，3&#125;, &#123;4, 5，6&#125;，&#123;7, 8, 9&#125;&#125;;array[1][1] = 5;</code></pre><p>或许你以为在内存中 <code>array</code> 数组会像一个二维矩阵:</p><pre><code class="hljs">1  2  34  5  67  8  9</code></pre><p>可实际上它是这样的：</p><pre><code class="hljs">1  2  3  4  5  6  7  8  9</code></pre><p>和一维数组没有什么区别，都是一维线性排列。</p><p>当我们像 <code>array[1][1]</code>这样去访问的时候，编译器会怎么去计算我们真正所访问元素的地址呢？</p><p>为了更加通用化，假设数组定义是这样的:</p><p><code>int array[n][m]</code></p><p>访问: <code>array[a][b]</code></p><p>那么被访问元素地址的计算方式就是: <code>array + (m * a + b)</code></p><p>这个就是二维数组在内存中的本质，其实和一维数组是一样的，只是语法糖包装成一个二维的样子。</p><h3 id="6、-void-指针"><a href="#6、-void-指针" class="headerlink" title="6、 void 指针"></a>6、 void 指针</h3><p>想必大家一定看到过 void 的这些用法：</p><pre><code class="hljs">void func();int func1(void);</code></pre><p>在这些情况下，void 表达的意思就是没有返回值或者参数为空。</p><p>但是对于 void 型指针却表示通用指针，可以用来存放任何数据类型的引用。</p><p>下面的例子就 是一个 void 指针：</p><pre><code class="hljs">void *ptr;</code></pre><p>void 指针最大的用处就是在 C 语言中实现泛型编程，因为任何指针都可以被赋给 void 指针，void 指针也可以被转换回原来的指针类型， 并且这个过程指针实际所指向的地址并不会发生变化。</p><p>比如:</p><pre><code class="hljs">int num;int *pi = &amp;num; printf(&quot;address of pi: %p\n&quot;, pi);void* pv = pi;pi = (int*) pv; printf(&quot;address of pi: %p\n&quot;, pi);</code></pre><p>这两次输出的值都会是一样:</p><p><img src="https://img-blog.csdnimg.cn/img_convert/4bd7d1a8218e90af9acc1bdb668eb608.png" alt="图片"></p><p>平常可能很少会这样去转换，但是当你用 C 写大型软件或者写一些通用库的时候，一定离不开 void 指针，这是 C 泛型的基石，比如 std 库里的 sort 函数申明是这样的:</p><pre><code class="hljs">void qsort(void *base,int nelem,int width,int (*fcmp)(const void *,const void *));</code></pre><p>所有关于具体元素类型的地方全部用 void 代替。</p><p>void 还可以用来实现 C 语言中的多态，这是一个挺好玩的东西。</p><p>不过也有需要注意的，<strong>不能对 void 指针解引用</strong></p><p>比如：</p><pre><code class="hljs">int num;void *pv = (void*)&amp;num;*pv = 4; // 错误</code></pre><p>为什么？</p><p>因为解引用的本质就是编译器根据指针所指的类型，然后从指针所指向的内存连续取 N 个字节，然后将这 N 个字节按照指针的类型去解释。</p><p>比如 int *型指针，那么这里 N 就是 4，然后按照 int 的编码方式去解释数字。</p><p>但是 void，编译器是不知道它到底指向的是 int、double、或者是一个结构体，所以编译器没法对 void 型指针解引用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java基础</title>
    <link href="/2022/10/25/%E5%90%8E%E7%AB%AF%E7%9F%A5%E8%AF%86/java%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/10/25/%E5%90%8E%E7%AB%AF%E7%9F%A5%E8%AF%86/java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="1-本章为转载内容"><a href="#1-本章为转载内容" class="headerlink" title="1.本章为转载内容"></a>1.本章为转载内容</h1><p>————————————————<br>版权声明：本文为CSDN博主「Terence全栈开发」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_39997939/article/details/123449889">https://blog.csdn.net/qq_39997939/article/details/123449889</a></p><h1 id="2-第一个演示程序"><a href="#2-第一个演示程序" class="headerlink" title="2. 第一个演示程序"></a>2. 第一个演示程序</h1><h2 id="2-1-常用DOS命令"><a href="#2-1-常用DOS命令" class="headerlink" title="2.1 常用DOS命令"></a>2.1 常用DOS命令</h2><p>在接触集成开发环境之前，我们需要使用命令行窗口对java程序进行编译和运行，所以需要知道一些常用DOS命令。<br>1、打开命令行窗口的方式:win + r打开运行窗口，输入cmd，回车。<br>2、常用命令及其作用</p><p>操作</p><p>说明</p><p>盘符名称:</p><p>盘符切换。E:回车，表示切换到E盘。</p><p>dir</p><p>查看当前路径下的内容。</p><p>cd 目录</p><p>进入单级目录。cd itterence</p><p>cd ..</p><p>回退到上一级目录。</p><p>cd 目录1\目录2…</p><p>进入多级目录。cd itterence\JavaSE</p><p>cd \</p><p>回退到盘符目录。</p><p>cls</p><p>清屏。</p><p>exit</p><p>退出命令提示符窗口。</p><h2 id="2-2-Path环境变量的配置"><a href="#2-2-Path环境变量的配置" class="headerlink" title="2.2 Path环境变量的配置"></a>2.2 Path环境变量的配置</h2><h3 id="2-2-1-为什么配置环境变量"><a href="#2-2-1-为什么配置环境变量" class="headerlink" title="2.2.1 为什么配置环境变量"></a>2.2.1 为什么配置环境变量</h3><p>开发Java程序，需要使用JDK提供的开发工具(比如javac.exe、java.exe等命令)，而这些工具在JDK的安装目录的 bin目录下，如果不配置环境变量，那么这些命令只可以在该目录下执行。我们不可能把所有的java文件都放到JDK的bin目录下，所以配置环境变量的作用就是可以使bin目录下的java相关命令可以在任意目录下使用。</p><h3 id="2-2-2-配置环境变量步骤"><a href="#2-2-2-配置环境变量步骤" class="headerlink" title="2.2.2 配置环境变量步骤"></a>2.2.2 配置环境变量步骤</h3><p><img src="https://img-blog.csdnimg.cn/e69bbbf2c5d2428881f6003f134638a2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGVyZW5jZS1XYW5n,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/b686f7011aa34b879e1c001b3258b76d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGVyZW5jZS1XYW5n,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/158acd8711f840fa870be2e1aa9e4e6c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGVyZW5jZS1XYW5n,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><strong>如果命令提示符窗口是配合环境变量前打开的,需要关闭该窗口,重新打开一个窗口测试</strong></p><h2 id="2-3-HelloWorld案例"><a href="#2-3-HelloWorld案例" class="headerlink" title="2.3 HelloWorld案例"></a>2.3 HelloWorld案例</h2><p>HelloWorld案例是指在计算机屏幕上输出“HelloWorld”这行文字。各种计算机语言都习惯使用该案例作为第一个演示案例。</p><h3 id="2-3-1-Java程序开发运行流程"><a href="#2-3-1-Java程序开发运行流程" class="headerlink" title="2.3.1 Java程序开发运行流程"></a>2.3.1 Java程序开发运行流程</h3><p>开发Java程序，需要三个步骤:编写程序，编译程序，运行程序。</p><h3 id="2-3-2-HelloWorld案例的编写"><a href="#2-3-2-HelloWorld案例的编写" class="headerlink" title="2.3.2 HelloWorld案例的编写"></a>2.3.2 HelloWorld案例的编写</h3><p>1、新建文本文档文件，修改名称为HelloWorld.java。<br>2、用记事本打开HelloWorld.java文件，输写程序内容。</p><pre><code class="hljs">public class HelloWorld &#123;    public static void main(String[] args) &#123;        System.out.println(&quot;HelloWorld&quot;);    &#125;&#125;</code></pre><h3 id="2-3-3-HelloWorld案例的编译和运行"><a href="#2-3-3-HelloWorld案例的编译和运行" class="headerlink" title="2.3.3 HelloWorld案例的编译和运行"></a>2.3.3 HelloWorld案例的编译和运行</h3><p>存文件，打开命令行窗口，将目录切换至java文件所在目录，编译java文件生成class文件，运行class文件。</p><blockquote><p>编译:javac 文件名.java<br>范例:javac HelloWorld.java<br>执行:java 类名<br>范例:java HelloWorld</p></blockquote><h2 id="2-4-HelloWorld案例常见问题-理解"><a href="#2-4-HelloWorld案例常见问题-理解" class="headerlink" title="2.4 HelloWorld案例常见问题(理解)"></a>2.4 HelloWorld案例常见问题(理解)</h2><h3 id="2-4-1-BUG"><a href="#2-4-1-BUG" class="headerlink" title="2.4.1 BUG"></a>2.4.1 BUG</h3><p>在电脑系统或程序中，隐藏着的一些未被发现的缺陷或问题统称为bug(漏洞)。</p><h3 id="2-4-2-BUG的解决"><a href="#2-4-2-BUG的解决" class="headerlink" title="2.4.2 BUG的解决"></a>2.4.2 BUG的解决</h3><p>1、具备识别BUG的能力:多看<br>2、具备分析BUG的能力:多思考，多查资料<br>3、具备解决BUG的能力:多尝试，多总结</p><h3 id="2-4-3-HelloWorld案例常见问题"><a href="#2-4-3-HelloWorld案例常见问题" class="headerlink" title="2.4.3 HelloWorld案例常见问题"></a>2.4.3 HelloWorld案例常见问题</h3><p>1、非法字符问题。Java中的符号都是英文格式的。<br>2、大小写问题。Java语言对大小写敏感(区分大小写)。<br>3、在系统中显示文件的扩展名，避免出现HelloWorld.java.txt文件。<br>4、编译命令后的java文件名需要带文件后缀.java<br>5、运行命令后的class文件名(类名)不带文件后缀.class …</p><h2 id="2-5-Notepad-软件的安装和使用"><a href="#2-5-Notepad-软件的安装和使用" class="headerlink" title="2.5 Notepad++软件的安装和使用"></a>2.5 Notepad++软件的安装和使用</h2><h3 id="2-5-1-什么要使用Notepad-软件"><a href="#2-5-1-什么要使用Notepad-软件" class="headerlink" title="2.5.1 什么要使用Notepad++软件"></a>2.5.1 什么要使用Notepad++软件</h3><p>Notepad++功能比windows中的自带记事本功能强大，除了可以用来制作一般的纯文字说明文件，也十分适合编写计算机程序代码。Notepad++有行号，能够快速定位问题位置，还有语法高亮度显示、代码折叠等功能。而且它是免费的。</p><h3 id="2-5-2-Notepad-软件安装"><a href="#2-5-2-Notepad-软件安装" class="headerlink" title="2.5.2 Notepad++软件安装"></a>2.5.2 Notepad++软件安装</h3><p>安装:傻瓜式安装，一直下一步即可。建议也安装到统一的开发软件目录下，比如E:\develop。</p><h3 id="2-5-3Notepad-软件配置"><a href="#2-5-3Notepad-软件配置" class="headerlink" title="2.5.3Notepad++软件配置"></a>2.5.3Notepad++软件配置</h3><p>安装完毕之后，为了使用方便，做一个简单的配置:修改默认语言和编码。<br><img src="https://img-blog.csdnimg.cn/c3becdf7a64b47fa95c3ec3eeb6f32b2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGVyZW5jZS1XYW5n,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f1f9c5177ca242888c3e52aff5696346.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGVyZW5jZS1XYW5n,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h1 id="3-java基础语法"><a href="#3-java基础语法" class="headerlink" title="3. java基础语法"></a>3. java基础语法</h1><h2 id="3-1-注释"><a href="#3-1-注释" class="headerlink" title="3.1 注释"></a>3.1 注释</h2><p>注释是对代码的解释和说明文字，可以提高程序的可读性，因此在程序中添加必要的注释文字十分重要。Java中的 注释分为三种:<br>单行注释。单行注释的格式是使用&#x2F;&#x2F;，从&#x2F;&#x2F;开始至本行结尾的文字将作为注释文字。</p><pre><code class="hljs">// 这是单行注释文字</code></pre><p>多行注释。多行注释的格式是使用&#x2F;* 和 *&#x2F;将一段较长的注释括起来。</p><pre><code class="hljs">/*  这是多行注释文字 这是多行注释文字 这是多行注释文字*/</code></pre><p><strong>注意</strong>:多行注释不能嵌套使用。</p><p>文档注释。文档注释以 &#x2F;** 开始，以 *&#x2F; 结束。(以后讲)</p><h2 id="3-2-关键字"><a href="#3-2-关键字" class="headerlink" title="3.2 关键字"></a>3.2 关键字</h2><p>关键字是指被java语言赋予了特殊含义的单词。<br>关键字的特点:关键字的字母全部小写。<br>常用的代码编辑器对关键字都有高亮显示，比如现在我们能看到的public、class、static等。</p><h2 id="3-3-常量"><a href="#3-3-常量" class="headerlink" title="3.3 常量"></a>3.3 常量</h2><p>常量:在程序运行过程中，其值不可以发生改变的量。<br>Java中的常量分类:<br>字符串常量 用双引号括起来的多个字符(可以包含0个、一个或多个)，例如”a”、“abc”、”中国”等<br>整数常量 整数，例如:-10、0、88等<br>小数常量 小数，例如:-5.5、1.0、88.88等<br>字符常量 用单引号括起来的一个字符，例如:‘a’、‘5’、‘B’、’中’等<br>布尔常量 布尔值，表示真假，只有两个值true和false<br>空常量 一个特殊的值，空值，值为null<br>除空常量外，其他常量均可使用输出语句直接输出。</p><pre><code class="hljs">public class Demo &#123;    public static void main(String[] args) &#123;        System.out.println(10); // 输出一个整数        System.out.println(5.5); // 输出一个小数        System.out.println(&#39;a&#39;); // 输出一个字符        System.out.println(true); // 输出boolean值true        System.out.println(&quot;欢迎来到黑马程序员&quot;); // 输出字符串    &#125;&#125;</code></pre><h2 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4 数据类型"></a>3.4 数据类型</h2><h3 id="3-4-1-计算机存储单元"><a href="#3-4-1-计算机存储单元" class="headerlink" title="3.4.1 计算机存储单元"></a>3.4.1 计算机存储单元</h3><p>我们知道计算机是可以用来存储数据的，但是无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位 (bit)”，我们又称之为“比特位”，通常用小写的字母”b”表示。而计算机中最基本的存储单元叫“字节(byte)”，<br>通常用大写字母”B”表示，字节是由连续的8个位组成。<br>除了字节外还有一些常用的存储单位，其换算单位如下:<br>1B(字节) &#x3D; 8bit<br>1KB &#x3D; 1024B<br>1MB &#x3D; 1024KB<br>1GB &#x3D; 1024MB<br>1TB &#x3D; 1024GB</p><h3 id="3-4-2-Java中的数据类型"><a href="#3-4-2-Java中的数据类型" class="headerlink" title="3.4.2 Java中的数据类型"></a>3.4.2 Java中的数据类型</h3><p>Java是一个强类型语言，Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型两种。<br><img src="https://img-blog.csdnimg.cn/5de12a1ac08140be89c3a1ef42ca4fe7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGVyZW5jZS1XYW5n,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>Java中的基本数据类型:</p><p>数据类型</p><p>关键字</p><p>内存占用</p><p>取值范围</p><p>整数类型</p><p>byte</p><p>1</p><p>-128~127</p><p>short</p><p>2</p><p>-32768~32767</p><p>int(默认)</p><p>4</p><p>-2的31次方到2的31次方-1</p><p>long</p><p>8</p><p>-2的63次方到2的63次方-1</p><p>浮点类型</p><p>float</p><p>4</p><p>负数:-3.402823E+38到-1.401298E-45 正数: 1.401298E-45到 3.402823E+38</p><p>double(默认)</p><p>8</p><p>负数:-1.797693E+308到-4.9000000E-324 正数:4.9000000E-324 到1.797693E+308</p><p>字符类型</p><p>char</p><p>2</p><p>0-65535</p><p>布尔 类型</p><p>boolean</p><p>1</p><p>true，false</p><p>说明: e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。在java中整数默认是int类型，浮点数默认是double类型。</p><h2 id="3-5-变量"><a href="#3-5-变量" class="headerlink" title="3.5 变量"></a>3.5 变量</h2><h3 id="3-5-1-变量的定义"><a href="#3-5-1-变量的定义" class="headerlink" title="3.5.1 变量的定义"></a>3.5.1 变量的定义</h3><p>变量:在程序运行过程中，其值可以发生改变的量。<br>从本质上讲，变量是内存中的一小块区域，其值可以在一定范围内变化。<br><img src="https://img-blog.csdnimg.cn/a51eba3c1ab24398bcbb299152d7a2b2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGVyZW5jZS1XYW5n,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>变量的定义格式:<br><img src="https://img-blog.csdnimg.cn/416b19a747a346bd874469e0fa7df329.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGVyZW5jZS1XYW5n,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><blockquote><p>数据类型 变量名 &#x3D; 初始化值; &#x2F;&#x2F; 声明变量并赋值<br>int age &#x3D; 18;<br>System.out.println(age);</p></blockquote><p>或者</p><blockquote><p>&#x2F;&#x2F; 先声明，后赋值(使用前赋值即可) 数据类型 变量名;<br>变量名 &#x3D; 初始化值;<br>double money;<br>money &#x3D; 55.5;<br>System.out.println(money);</p></blockquote><p>还可以在同一行定义多个同一种数据类型的变量，中间使用逗号隔开。但不建议使用这种方式，降低程序的可读性。</p><pre><code class="hljs">int a = 10, b = 20; // 定义int类型的变量a和b，中间使用逗号隔开System.out.println(a);System.out.println(b);int c,d; // 声明int类型的变量c和d，中间使用逗号隔开c = 30;d = 40;System.out.println(c);System.out.println(d);</code></pre><p>变量的使用:通过变量名访问即可。</p><h3 id="3-5-2-使用变量时的注意事项"><a href="#3-5-2-使用变量时的注意事项" class="headerlink" title="3.5.2 使用变量时的注意事项"></a>3.5.2 使用变量时的注意事项</h3><ol><li>在同一对花括号中，变量名不能重复。</li><li>变量在使用之前，必须初始化(赋值)。</li><li>定义long类型的变量时，需要在整数的后面加L(大小写均可，建议大写)。因为整数默认是int类型，整数太大可能超出int范围。</li><li>定义float类型的变量时，需要在小数的后面加F(大小写均可，建议大写)。因为浮点数的默认类型是double， double的取值范围是大于float的，类型不兼容。</li></ol><h3 id="3-6-标识符"><a href="#3-6-标识符" class="headerlink" title="3.6 标识符"></a>3.6 标识符</h3><p>标识符是用户编程时使用的名字，用于给类、方法、变量、常量等命名。<br>Java中标识符的组成规则:<br>由字母、数字、下划线“_”、美元符号“$”组成，第一个字符不能是数字。<br>不能使用java中的关键字作为标识符。<br>标识符对大小写敏感(区分大小写)。<br>Java中标识符的命名约定:<br>小驼峰式命名:变量名、方法名<br>首字母小写，从第二个单词开始每个单词的首字母大写。<br>大驼峰式命名:类名<br>每个单词的首字母都大写。<br>另外，标识符的命名最好可以做到见名知意<br>例如:username、studentNumber等。</p><h3 id="3-7-类型转换"><a href="#3-7-类型转换" class="headerlink" title="3.7 类型转换"></a>3.7 类型转换</h3><p>在Java中，一些数据类型之间是可以相互转换的。分为两种情况:自动类型转换和强制类型转换。 自动类型转换:<br>把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量。这种转换方式是自动的，直接书写即可。例如:</p><pre><code class="hljs"> double num = 10; // 将int类型的10直接赋值给double类型 System.out.println(num); // 输出10.0</code></pre><p>强制类型转换:<br>把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量。<br>强制类型转换格式:目标数据类型 变量名 &#x3D; (目标数据类型)值或者变量;<br>例如:</p><pre><code class="hljs">double num1 = 5.5;int num2 = (int) num1; // 将double类型的num1强制转换为int类型System.out.println(num2); // 输出5(小数位直接舍弃)</code></pre><p><img src="https://img-blog.csdnimg.cn/cf215b02f4ef4b2ba330e690b78dbc5c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAVGVyZW5jZS1XYW5n,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>说明:</p><ol><li><p>char类型的数据转换为int类型是按照码表中对应的int值进行计算的。比如在ASCII码表中，’a’对应97。</p><p> int a &#x3D; ‘a’;<br> System.out.println(a); &#x2F;&#x2F; 将输出97</p></li><li><p>整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型。</p><p>byte b1 &#x3D; 10;<br>byte b2 &#x3D; 20;<br>byte b3 &#x3D; b1 + b2;<br>&#x2F;&#x2F; 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。<br>&#x2F;&#x2F; 修改为:<br>int num &#x3D; b1 + b2;<br>&#x2F;&#x2F; 或者:<br>byte b3 &#x3D; (byte) (b1 + b2);</p></li><li><p>boolean类型不能与其他基本数据类型相互转换。</p></li></ol><h1 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4. 运算符"></a>4. 运算符</h1><h2 id="4-1-算术运算符"><a href="#4-1-算术运算符" class="headerlink" title="4.1 算术运算符"></a>4.1 算术运算符</h2><h3 id="4-1-1-运算符和表达式"><a href="#4-1-1-运算符和表达式" class="headerlink" title="4.1.1 运算符和表达式"></a>4.1.1 运算符和表达式</h3><p>运算符:对常量或者变量进行操作的符号<br>表达式:用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式。<br>不同运算符连接的表达式体现的是不同类型的表达式。<br>举例说明:</p><pre><code class="hljs">int a = 10;int b = 20;int c = a + b;</code></pre><p>+:是运算符，并且是算术运算符。<br>a + b:是表达式，由于+是算术运算符，所以这个表达式叫算术表达式。</p><h3 id="4-1-2-算术运算符"><a href="#4-1-2-算术运算符" class="headerlink" title="4.1.2 算术运算符"></a>4.1.2 算术运算符</h3><p>符号</p><p>作用</p><p>说明</p><ul><li></li></ul><p>加</p><p>参看小学一年级</p><p>-</p><p>减</p><p>参看小学一年级</p><p>*</p><p>乘</p><p>参看小学二年级，与“×”相同</p><p>&#x2F;</p><p>除</p><p>参看小学二年级，与“÷”相同</p><p>%</p><p>取余</p><p>获取的是两个数据做除法的余数</p><p>注意: &#x2F;和%的区别:两个数据做除法，&#x2F;取结果的商，%取结果的余数。<br>整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。</p><pre><code class="hljs">int a = 10;int b = 3;System.out.println(a / b); // 输出结果3System.out.println(a % b); // 输出结果1</code></pre><h3 id="4-1-3-字符的“-”操作"><a href="#4-1-3-字符的“-”操作" class="headerlink" title="4.1.3 字符的“+”操作"></a>4.1.3 字符的“+”操作</h3><p>char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值:<br>‘a’ – 97 a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加<br>‘A’ – 65 A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加<br>‘0’ – 48 0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p><pre><code class="hljs">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少char ch1 = &#39;a&#39;;System.out.println(ch1 + 1); // 输出98，97 + 1 = 98char ch2 = &#39;A&#39;;System.out.println(ch2 + 1); // 输出66，65 + 1 = 66char ch3 = &#39;0&#39;;System.out.println(ch3 + 1); // 输出49，48 + 1 = 49</code></pre><p>算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。<br>提升规则:<br>byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。<br>整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型<br>等级顺序:byte,short,char –&gt; int –&gt; long –&gt; float –&gt; double<br>例如:</p><pre><code class="hljs">byte b1 = 10;byte b2 = 20;// byte b3 = b1 + b2; // 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失精度int i3 = b1 + b2; // 应该使用int接收byte b3 = (byte) (b1 + b2); // 或者将结果强制转换为byte类型// -------------------------------int num1 = 10;double num2 = 20.0;double num3 = num1 + num2; // 使用double接收，因为num1会自动提升为double类型</code></pre><p>tips:正是由于上述原因，所以在程序开发中我们很少使用byte或者short类型定义整数。也很少会使用char类型定义字符，而使用字符串类型，更不会使用char类型做算术运算。</p><h3 id="4-1-4-字符串的“-”操作"><a href="#4-1-4-字符串的“-”操作" class="headerlink" title="4.1.4 字符串的“+”操作"></a>4.1.4 字符串的“+”操作</h3><p>当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算。</p><pre><code class="hljs">System.out.println(&quot;itheima&quot;+ 666); // 输出:itheima666</code></pre><p>在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“+”操作时，从左到右逐个执行。</p><pre><code class="hljs">System.out.println(1 + 99 + &quot;年黑马&quot;); // 输出:100年黑马System.out.println(1 + 2 + &quot;itheima&quot; + 3 + 4); // 输出:3itheima34// 可以使用小括号改变运算的优先级System.out.println(1 + 2 + &quot;itheima&quot; + (3 + 4)); // 输出:3itheima7 </code></pre><h2 id="4-2-赋值运算符-应用"><a href="#4-2-赋值运算符-应用" class="headerlink" title="4.2 赋值运算符(应用)"></a>4.2 赋值运算符(应用)</h2><p>赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。</p><p>符号</p><p>作用</p><p>说明</p><p>=</p><p>赋值</p><p>a&#x3D;10，将10赋值给变量a</p><p>+&#x3D;</p><p>加后赋值</p><p>a+&#x3D;b，将a+b的值给a</p><p>-&#x3D;</p><p>减后赋值</p><p>a-&#x3D;b，将a-b的值给a</p><p>*&#x3D;</p><p>乘后赋值</p><p>a*&#x3D;b，将a×b的值给a</p><p>&#x2F;&#x3D;</p><p>除后赋值</p><p>a&#x2F;&#x3D;b，将a÷b的商给a</p><p>%&#x3D;</p><p>取余后赋值</p><p>a%&#x3D;b，将a÷b的余数给a</p><p>注意:</p><p>扩展的赋值运算符隐含了强制类型转换。</p><pre><code class="hljs">short s = 10;s = s + 10; // 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度s += 10; // 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10);</code></pre><h2 id="4-3-自增自减运算符"><a href="#4-3-自增自减运算符" class="headerlink" title="4.3 自增自减运算符"></a>4.3 自增自减运算符</h2><p>符号</p><p>作用</p><p>说明</p><p>++</p><p>自增</p><p>变量的值加1</p><p>–</p><p>自减</p><p>变量的值减1</p><p>注意事项:<br>++和– 既可以放在变量的后边，也可以放在变量的前边。<br>单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的。<br>参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–。<br>参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作。<br>最常见的用法:单独使用。</p><pre><code class="hljs">int i = 10;i++; // 单独使用 System.out.println(&quot;i:&quot; + i); // i:11int j = 10;++j; // 单独使用 System.out.println(&quot;j:&quot; + j); // j:11int x = 10;int y = x++; // 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1System.out.println(&quot;x:&quot; + x + &quot;, y:&quot; + y); // x:11，y:10int m = 10;int n = ++m; // 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1System.out.println(&quot;m:&quot; + m + &quot;, m:&quot; + m); // m:11，m:11</code></pre><p>练习:</p><pre><code class="hljs">int x = 10;int y = x++ + x++ + x++;System.out.println(y); // y的值是多少?/* 解析，三个表达式都是++在后，所以每次使用的都是自增前的值，但程序自左至右执行，所以第一次自增时，使用的是 10进行计算，但第二次自增时，x的值已经自增到11了，所以第二次使用的是11，然后再次自增。。。 所以整个式子应该是:int y = 10 + 11 + 12;输出结果为33。*/</code></pre><p>注意:通过此练习深刻理解自增和自减的规律，但实际开发中强烈建议不要写这样的代码!小心挨打!</p><h2 id="4-4-关系运算符"><a href="#4-4-关系运算符" class="headerlink" title="4.4 关系运算符"></a>4.4 关系运算符</h2><p>关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。</p><p>符号</p><p>说明</p><p>=&#x3D;</p><p>a&#x3D;&#x3D;b，判断a和b的值是否相等，成立为true，不成立为false</p><p>!&#x3D;</p><p>a!&#x3D;b，判断a和b的值是否不相等，成立为true，不成立为false</p><p>&gt;</p><p>a&gt;b，判断a是否大于b，成立为true，不成立为false</p><p>&gt;&#x3D;</p><p>a&gt;&#x3D;b，判断a是否大于等于b，成立为true，不成立为false</p><p>&lt;</p><p>a&lt;b，判断a是否小于b，成立为true，不成立为false</p><p>&lt;&#x3D;</p><p>a&lt;&#x3D;b，判断a是否小于等于b，成立为true，不成立为false</p><p>注意事项:</p><p>关系运算符的结果都是boolean类型，要么是true，要么是false。</p><p>千万不要把”&#x3D;&#x3D;“误写成”&#x3D;“，”&#x3D;&#x3D;”是判断是否相等的关系，&#x3D;是赋值。</p><pre><code class="hljs">int a = 10;int b = 20;System.out.println(a == b); // falseSystem.out.println(a != b); // trueSystem.out.println(a &gt; b); // falseSystem.out.println(a &gt;= b); // falseSystem.out.println(a &lt; b); // trueSystem.out.println(a &lt;= b); // true// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量 boolean flag = a &gt; b;System.out.println(flag); // 输出false</code></pre><h2 id="4-5-逻辑运算符"><a href="#4-5-逻辑运算符" class="headerlink" title="4.5 逻辑运算符"></a>4.5 逻辑运算符</h2><p>逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。</p><p>符号</p><p>作用</p><p>说明</p><p>&amp;</p><p>逻辑与</p><p>a&amp;b，a和b都是true，结果为true，否则为false</p><p>|</p><p>逻辑或</p><p>a|b，a和b都是false，结果为false，否则为true</p><p>^</p><p>逻辑异或</p><p>a^b，a和b结果不同为true，相同为false</p><p>!</p><p>逻辑非</p><p>!a，结果和a的结果正好相反</p><pre><code class="hljs">//定义变量int i = 10; int j = 20; int k = 30;//&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为falseSystem.out.println((i &gt; j) &amp; (i&gt; k)); //false &amp; false,输出false System.out.println((i &lt; j) &amp; (i&gt; k)); //true &amp; false,输出false false System.out.println((i &gt; j) &amp; (i&lt; k)); //false &amp; true,输出System.out.println((i &lt; j) &amp; (i&lt; k)); //true &amp; true,输出trueSystem.out.println(&quot;--------&quot;);//| “或”，或者的关系，只要表达式中有一个值为true，结果即为trueSystem.out.println((i &gt; j) | (i&gt; k)); //false | false,输出false System.out.println((i &lt; j) | (i&gt; k)); //true | false,输出trueSystem.out.println((i &gt; j) | (i&lt; k)); //false | true,输出trueSystem.out.println((i &lt; j) | (i&lt; k)); //true | true,输出trueSystem.out.println(&quot;--------&quot;);//^ “异或”，相同为false，不同为trueSystem.out.println((i &gt; j) ^ (i &gt; k)); //false ^ false,输出falseSystem.out.println((i &lt; j) ^ (i &gt; k)); //true ^ false,输出trueSystem.out.println((i &gt; j) ^ (i &lt; k)); //false ^ true,输出trueSystem.out.println((i &lt; j) ^ (i &lt; k)); //true ^ true,输出falseSystem.out.println(&quot;--------&quot;);//! “非”，取反System.out.println((i &gt; j)); //falseSystem.out.println(!(i &gt; j)); //!false,输出true   </code></pre><p>短路逻辑运算符</p><p>符号</p><p>作用</p><p>说明</p><p>&amp;&amp;</p><p>短路与</p><p>作用和&amp;相同，但是有短路效果</p><p>||</p><p>短路或</p><p>作用和</p><p>在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都 计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为true，右边的表达式 将不再参与运算。</p><ul><li><p>逻辑与&amp;，无论左边真假，右边都要执行。</p></li><li><p>短路与&amp;&amp;，如果左边为真，右边执行;如果左边为假，右边不执行。</p></li><li><p>逻辑或|，无论左边真假，右边都要执行。</p></li><li><p>短路或||，如果左边为假，右边执行;如果左边为真，右边不执行。</p><p>int x &#x3D; 3;<br>int y &#x3D; 4;<br>System.out.println((x++ &gt; 4) &amp; (y++ &gt; 5)); &#x2F;&#x2F; 两个表达都会运算<br>System.out.println(x); &#x2F;&#x2F; 4<br>System.out.println(y); &#x2F;&#x2F; 5<br>System.out.println((x++ &gt; 4) &amp;&amp; (y++ &gt; 5)); &#x2F;&#x2F; 左边已经可以确定结果为false，右边不参与运算 System.out.println(x); &#x2F;&#x2F; 4<br>System.out.println(y); &#x2F;&#x2F; 4</p></li></ul><h2 id="4-6-三元运算符"><a href="#4-6-三元运算符" class="headerlink" title="4.6 三元运算符"></a>4.6 三元运算符</h2><p>三元运算符语法格式:</p><blockquote><p>关系表达式 ? 表达式1 : 表达式2;</p></blockquote><p>解释:问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为:如果条件表达式成立或者满足则执行表达式1，否则执行第二个。<br>举例:</p><pre><code class="hljs">int a = 10;int b = 20;int c = a &gt; b ? a : b; // 判断 a&gt;b 是否为真，如果为真取a的值，如果为假，取b的值</code></pre><p>三元运算符案例:<br>1、需求:动物园里有两只老虎，已知两只老虎的体重分别为180kg、200kg，请用程序实现判断两只老虎的体重是否相同。</p><pre><code class="hljs">public class OperatorTest01 &#123;    public static void main(String[] args) &#123;        //1：定义两个变量用于保存老虎的体重，单位为kg，这里仅仅体现数值即可。        int weight1 = 180;        int weight2 = 200;        //2：用三元运算符实现老虎体重的判断，体重相同，返回true，否则，返回false。        boolean b = weight1 == weight2 ? true : false;        //3：输出结果        System.out.println(&quot;b:&quot; + b);    &#125;&#125;</code></pre><p>2、需求:一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm，请用程序实现获取这三个和尚的最高身高。</p><pre><code class="hljs">public class OperatorTest02 &#123;    public static void main(String[] args) &#123;        //1：定义三个变量用于保存和尚的身高，单位为cm，这里仅仅体现数值即可。        int height1 = 150;        int height2 = 210;        int height3 = 165;        //2：用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。        int tempHeight = height1 &gt; height2 ? height1 : height2;        //3：用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。        int maxHeight = tempHeight &gt; height3 ? tempHeight : height3;        //4：输出结果        System.out.println(&quot;maxHeight:&quot; + maxHeight);    &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS基础内容总结</title>
    <link href="/2022/09/28/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%934/"/>
    <url>/2022/09/28/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%934/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H5C3知识总结</title>
    <link href="/2022/09/27/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%933/"/>
    <url>/2022/09/27/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%933/</url>
    
    <content type="html"><![CDATA[<h1 id="🍭-H5C3知识总结"><a href="#🍭-H5C3知识总结" class="headerlink" title="🍭 H5C3知识总结"></a>🍭 H5C3知识总结</h1><h2 id="HTML新增样式"><a href="#HTML新增样式" class="headerlink" title="HTML新增样式"></a>HTML新增样式</h2><h2 id="1，语义化标签"><a href="#1，语义化标签" class="headerlink" title="1，语义化标签"></a>1，语义化标签</h2><pre><code class="hljs">1.&lt;header&gt;&lt;/header&gt;  2.&lt;nav&gt;&lt;/nav&gt;  3.&lt;article&gt;&lt;/article&gt;   4&lt;section&gt;&lt;/section&gt;  5.&lt;aside&gt;&lt;/aside&gt; 6.&lt;footer&gt;&lt;/footer&gt;</code></pre><hr><h2 id="2-video标签"><a href="#2-video标签" class="headerlink" title="2.video标签"></a>2.video标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">‘文件地址’</span> <span class="hljs-attr">...</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">autoplay</td><td align="center">autoplay</td><td align="center">视频就绪自动播放 （谷歌浏览器需要添加muted来解 决自动播放问题）</td></tr><tr><td align="center">controls</td><td align="center">controls</td><td align="center">向用户显示播放控件</td></tr><tr><td align="center">width</td><td align="center">pixels（像素）</td><td align="center">设置播放器宽度</td></tr><tr><td align="center">height</td><td align="center">pixels（像素）</td><td align="center">设置播放器高度</td></tr><tr><td align="center">loop</td><td align="center">loop</td><td align="center">播放完是否继续播放该视频，循环播放</td></tr><tr><td align="center">preload</td><td align="center">auto（预先加载视频） none（不应加载视频）</td><td align="center">规定是否预加载视频（如果有了autoplay就忽略该属性）</td></tr><tr><td align="center">src</td><td align="center">url</td><td align="center">视频urt地址</td></tr><tr><td align="center">poster</td><td align="center">Imgurl</td><td align="center">加载等待的画面图片</td></tr><tr><td align="center">muted</td><td align="center">muted</td><td align="center">静音播放</td></tr></tbody></table><hr><h2 id="3-audio标签"><a href="#3-audio标签" class="headerlink" title="3.audio标签"></a>3.audio标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">‘文件地址’</span> <span class="hljs-attr">...</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其他属性：</p><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">autoplay</td><td align="center">autoplay</td><td align="center">如果出现该属性，则音频在就绪后马上播放。</td></tr><tr><td align="center">controls</td><td align="center">controls</td><td align="center">如果出现该属性，则向用户显示控件，比如播放按钮。</td></tr><tr><td align="center">loop</td><td align="center">loop</td><td align="center">如果出现该属性，则每当音频结束时重新开始播放。</td></tr><tr><td align="center">src</td><td align="center">url</td><td align="center">要播放的音频的URL。</td></tr></tbody></table><hr><h2 id="4-input类型"><a href="#4-input类型" class="headerlink" title="4.input类型"></a>4.input类型</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;...&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.type类属性：</p><table><thead><tr><th align="center">type值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">type&#x3D;”email”</td><td align="center">限制用户输入必须为Email类型</td></tr><tr><td align="center">type&#x3D;”url</td><td align="center">限制用户输入必须为URL类型</td></tr><tr><td align="center">type&#x3D;”date”</td><td align="center">限制用户输入必须为日期类型</td></tr><tr><td align="center">type&#x3D;”time”</td><td align="center">限制用户输入必须为时间类型</td></tr><tr><td align="center">type&#x3D;”month”</td><td align="center">限制用户输入必须为月类型</td></tr><tr><td align="center">type&#x3D;”week”</td><td align="center">限制用户输入必须为周类型</td></tr><tr><td align="center">type&#x3D;”number”</td><td align="center">限制用户输入必须为数字类型</td></tr><tr><td align="center">type&#x3D;”tel”</td><td align="center">手机号码</td></tr><tr><td align="center">type&#x3D;”search”</td><td align="center">搜索框</td></tr><tr><td align="center">type&#x3D;”color”</td><td align="center">生成一个颜色选择表单</td></tr></tbody></table><p>2.input表单属性</p><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">required</td><td align="center">required</td><td align="center">表单拥有该属性表示其内容不能为空</td></tr><tr><td align="center">placeholder</td><td align="center">提示文本</td><td align="center">表单的提示信息，存在默认值将不显示</td></tr><tr><td align="center">autofocus</td><td align="center">autofocus</td><td align="center">自动聚焦属性， 页面加载完成自动聚焦到指定表单</td></tr><tr><td align="center">autocomplete</td><td align="center">off&#x2F;on</td><td align="center">当用户在字段开始键入时， 浏览器基于之前键入过的值， 应该显示出在字段中填写的选项。默认已经打开，如 autocomplete&#x3D;”on”关闭autocomplete&#x3D;”off”需要放在表单内，同时加上 name 属性，同时成功提交</td></tr><tr><td align="center">multiple</td><td align="center">multiple</td><td align="center">可以多选文件提交</td></tr></tbody></table><hr><h2 id="CSS内容"><a href="#CSS内容" class="headerlink" title="CSS内容"></a>CSS内容</h2><h2 id="CSS新增选择器"><a href="#CSS新增选择器" class="headerlink" title="CSS新增选择器"></a>CSS新增选择器</h2><h4 id="1-属性选择器"><a href="#1-属性选择器" class="headerlink" title="1.属性选择器"></a>1.属性选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">input[value]   <span class="hljs-comment">&lt;!-- input类里并包含value的input --&gt;</span><br>div[class^=?]  <span class="hljs-comment">&lt;!-- 选择div里class属性开头是？的div --&gt;</span><br>Div[class*=?]  <span class="hljs-comment">&lt;!-- 选择div里class属性包含？的div  --&gt;</span><br>input[value]   <span class="hljs-comment">&lt;!-- input类里并包含value的input --&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-结构伪类选择器"><a href="#2-结构伪类选择器" class="headerlink" title="2.结构伪类选择器"></a>2.结构伪类选择器</h4><blockquote><p>选择父元素第n个子元素</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HTML">ul li : first-child     <span class="hljs-comment">&lt;!-- 选择ul li 第一个孩子 --&gt;</span><br>ul li : last-child      <span class="hljs-comment">&lt;!-- 选择ul li 最后一个孩子 --&gt;</span><br>ul li : nth-child(n)    <span class="hljs-comment">&lt;!-- 选择ul li 第n个孩子 --&gt;</span><br>ul li : nth-child(even) <span class="hljs-comment">&lt;!-- 偶数 --&gt;</span><br>ul li : nth-child(odd)  <span class="hljs-comment">&lt;!-- 奇数 --&gt;</span><br>ul li : nth-child(n)    <span class="hljs-comment">&lt;!-- 选择ul li 从1-n孩子 --&gt;</span><br><br>element：First-of-type   <span class="hljs-comment">&lt;!-- 选择第一个元素 --&gt;</span><br>element：Second-of-type  <span class="hljs-comment">&lt;!-- 选择第二个元素 --&gt;</span><br>element：Nth-of-type(n)  <span class="hljs-comment">&lt;!-- 选择第n个元素 --&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-伪元素选择器-行内元素"><a href="#3-伪元素选择器-行内元素" class="headerlink" title="3.伪元素选择器 (行内元素)"></a>3.伪元素选择器 (行内元素)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">1.E::before&#123;content:&#125;   <span class="hljs-comment">&lt;!-- 在元素内部的前面插入内容 --&gt;</span><br>2.E::after&#123;content:&#125;    <span class="hljs-comment">&lt;!-- 在元素内部的后面插入内容 --&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>伪元素清除浮动（尾部阻隔）</p></blockquote><img src="/2022/09/27/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%933/tailclear.png" class title="This is an test image"><blockquote><p>伪元素清除浮动（头部阻隔）</p></blockquote><img src="/2022/09/27/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%933/headclear.png" class title="This is an test image"><hr><h2 id="CSS盒子模型"><a href="#CSS盒子模型" class="headerlink" title="CSS盒子模型"></a>CSS盒子模型</h2><p>1.不撑开盒子大小</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">Box-sizing:border-box<br></code></pre></td></tr></table></figure><p>2.模糊函数  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">Filter:blur(?px)<br></code></pre></td></tr></table></figure><p>3.calc函数  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">width:calc(100% - 80px)  <span class="hljs-comment">&lt;!-- 比父盒子100% 小 80px --&gt;</span><br></code></pre></td></tr></table></figure><p>4.过渡 (谁做过渡给谁+) ，(多个属性，隔开)，(all属性全变)</p><pre><code class="hljs">transition：要过渡的属性 花费时间 运动曲线 何时开始；1.属性：想要变化的 css 属性，宽度高度 背景颜色 内外边距都可以。 如果想要所有的属性都变化过渡，写一个all 就可以。2.花费时间：单位是秒（必须写单位） 比如 0.5s 3.运动曲线：默认是 ease （可以省略）4.何时开始：单位是秒（必须写单位） 可以设置延迟触发时间 默认是 Os（可以省略）</code></pre><hr><h2 id="Web-服务器"><a href="#Web-服务器" class="headerlink" title="Web 服务器"></a>Web 服务器</h2><mark>注意：一般稳定的服务器都是需要收费的。比如：阿里云</mark><blockquote><p>这里给大家推荐一个免费的远程服务器(免费空间) <a href="http://free.3v.do/">http://free.3v.do/</a></p></blockquote><p>1.去免费空间网站注册账号。<br>2.记录下主机名、用户名、密码、域名。<br>3.利用cutftp软件上传网站到远程服务器。<br>4.在浏览器中输入域名，即可访问我们的网站了。</p><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2>]]></content>
    
    
    
    <tags>
      
      <tag>H5C3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS知识总结</title>
    <link href="/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/"/>
    <url>/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/</url>
    
    <content type="html"><![CDATA[<h1 id="🍭-CSS内容总结"><a href="#🍭-CSS内容总结" class="headerlink" title="🍭 CSS内容总结"></a>🍭 CSS内容总结</h1><h2 id="1-给定标签类型"><a href="#1-给定标签类型" class="headerlink" title="1.给定标签类型"></a>1.给定标签类型</h2><h4 id="1-1-class类型-（可以调用多次）"><a href="#1-1-class类型-（可以调用多次）" class="headerlink" title="1.1 .class类型   （可以调用多次）"></a>1.1 .class类型   （可以调用多次）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>        .red &#123; color=”red”;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">”red”</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><mark>注释：class里可以有多个类名，必须以空格隔开class&#x3D;“first second third”</mark><br><strong>example:</strong><br><font color="red">red</font></p><h4 id="1-2-id类型-只能调用一次）"><a href="#1-2-id类型-只能调用一次）" class="headerlink" title="1.2 #id类型      (只能调用一次）"></a>1.2 #id类型      (只能调用一次）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>        #red &#123; color=”red”;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">”red”</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>example:</strong><br><font color="red">red</font></p><h4 id="1-3-通配符类型-所有都调用）"><a href="#1-3-通配符类型-所有都调用）" class="headerlink" title="1.3 * 通配符类型  (所有都调用）"></a>1.3 * 通配符类型  (所有都调用）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>  * &#123;color=”red”;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">”red”</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">”red”</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>red<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>example:</strong><br><font color="red">red</font><br><font color="red">red</font><br><font color="red">red</font></p><hr><h2 id="2-文字样式"><a href="#2-文字样式" class="headerlink" title="2.文字样式"></a>2.文字样式</h2><h4 id="1-Color（文字颜色）"><a href="#1-Color（文字颜色）" class="headerlink" title="1.Color（文字颜色）:"></a>1.Color（文字颜色）:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">color: “red”/“#ff0000”/“rgb(255,0,0)”/“rgb(100%,0,0)”;<br></code></pre></td></tr></table></figure><h4 id="2-Background（背景颜色）"><a href="#2-Background（背景颜色）" class="headerlink" title="2. Background（背景颜色）:"></a>2. Background（背景颜色）:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">background: “red”/“#ff0000”/“rgb(255,0,0)”/“rgb(100%,0,0)”/rgba(100%,0,0,0.3);<br></code></pre></td></tr></table></figure><h4 id="3-font-size（字体大小）"><a href="#3-font-size（字体大小）" class="headerlink" title="3. font-size（字体大小）:"></a>3. font-size（字体大小）:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">font-size: 18px；  //(18像素)<br></code></pre></td></tr></table></figure><h4 id="4-font-family（字体类型）"><a href="#4-font-family（字体类型）" class="headerlink" title="4.font-family（字体类型）:"></a>4.font-family（字体类型）:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">font-family: &quot;icomoon&quot;;    //icomoon字体<br></code></pre></td></tr></table></figure><h4 id="5-font-weight（字体粗细）"><a href="#5-font-weight（字体粗细）" class="headerlink" title="5.font-weight（字体粗细）:"></a>5.font-weight（字体粗细）:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">font-weight:  “normal（400）/bold（700）;”   //(不跟单位)<br></code></pre></td></tr></table></figure><h4 id="6-font-style-（字体样式）"><a href="#6-font-style-（字体样式）" class="headerlink" title="6.font-style （字体样式）:"></a>6.font-style （字体样式）:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">font-style:  “italic（斜体）/normal（正常）;”<br></code></pre></td></tr></table></figure><h4 id="7-复合属性："><a href="#7-复合属性：" class="headerlink" title="7.复合属性："></a>7.复合属性：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">font: font-style font-weight font-size/line-height/font-family;<br><span class="hljs-comment">&lt;!-- font-size 和 font-family 不能少 --&gt;</span><br></code></pre></td></tr></table></figure><h4 id="8-行高"><a href="#8-行高" class="headerlink" title="8. 行高:"></a>8. 行高:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">line-height= ?px  ;<br><span class="hljs-comment">&lt;!-- 当行高等于总高度则文字垂直居中 --&gt;</span><br></code></pre></td></tr></table></figure><h4 id="9-文字位置"><a href="#9-文字位置" class="headerlink" title="9. 文字位置:"></a>9. 文字位置:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">text-align: center  / left  /  right  ;  <br></code></pre></td></tr></table></figure><h4 id="10-划线位置"><a href="#10-划线位置" class="headerlink" title="10.划线位置:"></a>10.划线位置:</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">Text-decoration : underline(下划线) / line-through(贯穿线) / overline(上划线) / none  ;<br></code></pre></td></tr></table></figure><h3 id="11-首行缩进"><a href="#11-首行缩进" class="headerlink" title="11.首行缩进:"></a>11.首行缩进:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">Text-indent: 10px / 2em  ;  <br></code></pre></td></tr></table></figure><h4 id="12-文字阴影："><a href="#12-文字阴影：" class="headerlink" title="12.文字阴影："></a>12.文字阴影：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">text-shadow：  h-shadow   v-shadow  blur   spread  color  insert;<br></code></pre></td></tr></table></figure><hr><h2 id="3-行-x2F-块-元素"><a href="#3-行-x2F-块-元素" class="headerlink" title="3.行&#x2F;块 元素"></a>3.行&#x2F;块 元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML">display: block;  <span class="hljs-comment">&lt;!--把行内元素改成块级元素--&gt;</span><br>display：inline；<span class="hljs-comment">&lt;!--把块级元素改成行内元素--&gt;</span><br>display：inline-block；<span class="hljs-comment">&lt;!--行内块元素--&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="4-背景元素"><a href="#4-背景元素" class="headerlink" title="4.背景元素"></a>4.背景元素</h2><h4 id="4-1背景颜色"><a href="#4-1背景颜色" class="headerlink" title="4.1背景颜色"></a>4.1背景颜色</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">background-color:  transparent(透明) /  red红）  /...;<br></code></pre></td></tr></table></figure><h4 id="4-2背景图片"><a href="#4-2背景图片" class="headerlink" title="4.2背景图片"></a>4.2背景图片</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">background-image: none (空)/ url(url)  （图片地址）;<br></code></pre></td></tr></table></figure><h4 id="4-3背景图片铺方式"><a href="#4-3背景图片铺方式" class="headerlink" title="4.3背景图片铺方式"></a>4.3背景图片铺方式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">background-repeat: no-repeat(不平铺)/ repeat（平铺）/repeat-x（水平平铺）;<br></code></pre></td></tr></table></figure><h4 id="4-4背景图片位置"><a href="#4-4背景图片位置" class="headerlink" title="4.4背景图片位置"></a>4.4背景图片位置</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">backrgound-position:x y;  <br>x , y = center top left right(方位词)  <br></code></pre></td></tr></table></figure><h4 id="4-5背景颜色透明度"><a href="#4-5背景颜色透明度" class="headerlink" title="4.5背景颜色透明度"></a>4.5背景颜色透明度</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">background: rgba(r,g,b,a) ; <span class="hljs-comment">&lt;!-- a取值0-1 --&gt;</span><br>opcity: .5  <span class="hljs-comment">&lt;!-- opcity透明度 --&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-6背景移动方式"><a href="#4-6背景移动方式" class="headerlink" title="4.6背景移动方式"></a>4.6背景移动方式</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">Background-attachment : scroll / fixed;<br></code></pre></td></tr></table></figure><h4 id="4-7css背景属性整合写法"><a href="#4-7css背景属性整合写法" class="headerlink" title="4.7css背景属性整合写法"></a>4.7css背景属性整合写法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">background:  color   url(url)  no-repeat  fixed  center  top;<br></code></pre></td></tr></table></figure><hr><h2 id="5-css三大特性（层叠性，继承性，优先级）"><a href="#5-css三大特性（层叠性，继承性，优先级）" class="headerlink" title="5.css三大特性（层叠性，继承性，优先级）"></a>5.css三大特性（层叠性，继承性，优先级）</h2><pre><code class="hljs">层叠性: 样式冲突覆盖  继承性: 子继承父  优先级: 权重</code></pre><p><mark>权重大小</mark></p><img src="/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/css%E6%9D%83%E9%87%8D.png" class title="This is an test image"><p><mark>注意:复合选择器有权重叠加问题</mark></p><hr><h2 id="6-css书写顺序"><a href="#6-css书写顺序" class="headerlink" title="6.css书写顺序"></a>6.css书写顺序</h2><img src="/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/css%E4%B9%A6%E5%86%99%E9%A1%BA%E5%BA%8F.png" class title="This is an test image"><hr><h2 id="7-选择器"><a href="#7-选择器" class="headerlink" title="7.选择器"></a>7.选择器</h2><h4 id="7-1-后代选择器："><a href="#7-1-后代选择器：" class="headerlink" title="7.1 后代选择器："></a>7.1 后代选择器：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">ol li &#123; color: pink;&#125;  <span class="hljs-comment">&lt;!--改变ol下li中文字颜色--&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-2-子选择器："><a href="#7-2-子选择器：" class="headerlink" title="7.2 子选择器："></a>7.2 子选择器：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">ol&gt;li&#123;&#125;  <span class="hljs-comment">&lt;!-- 只改变ol下一级li --&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-3-并集选择器："><a href="#7-3-并集选择器：" class="headerlink" title="7.3 并集选择器："></a>7.3 并集选择器：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">div,p&#123;&#125;  <span class="hljs-comment">&lt;!-- 改变div和p --&gt;</span><br></code></pre></td></tr></table></figure><h4 id="7-4-伪类选择器："><a href="#7-4-伪类选择器：" class="headerlink" title="7.4 伪类选择器："></a>7.4 伪类选择器：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">a:link&#123;color: &#125;      // (未访问链接）  <br>a:visited&#123;color: &#125;   //（访问过的链接）<br>a:hover&#123;color:&#125;      //（鼠标经过的链接）  <br>a:active&#123;color:&#125;     //（鼠标按下未弹起的链接）<br></code></pre></td></tr></table></figure><mark>注意：1.按照顺序写伪类选择器       2.链接要单独指定样式</mark><h4 id="7-5-focus伪类选择器"><a href="#7-5-focus伪类选择器" class="headerlink" title="7.5 focus伪类选择器"></a>7.5 focus伪类选择器</h4><p>选取焦点的表单元素谁获得光标谁改变样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">Input :focus&#123;&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="8-盒子"><a href="#8-盒子" class="headerlink" title="8.盒子"></a>8.盒子</h2><h4 id="8-1-border边框设置"><a href="#8-1-border边框设置" class="headerlink" title="8.1 border边框设置"></a>8.1 border边框设置</h4><p>8.1.1边框粗细</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">border-width: ?;<br></code></pre></td></tr></table></figure><p>8.1.2边框样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">border-style: solid(实线) | dashed(虚线) | dotted(点线);<br></code></pre></td></tr></table></figure><p>8.1.3边框颜色</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">border-color: ?;<br></code></pre></td></tr></table></figure><p>8.1.4复合属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">boeder(border-top/border-bottom/..)  : width   style   color ;<br></code></pre></td></tr></table></figure><p>8.1.5边框重合</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">border-collapse:collapse;<br></code></pre></td></tr></table></figure><h4 id="8-2-padding-内边距"><a href="#8-2-padding-内边距" class="headerlink" title="8.2 padding 内边距"></a>8.2 padding 内边距</h4><pre><code class="hljs">padding-top / padding-left / padding-right / padding-bottom: ;</code></pre><p>复合属性:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">padding: top right left bottom; <br></code></pre></td></tr></table></figure><img src="/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/padding.png" class title="This is an test image"><h4 id="8-3-margin外边距"><a href="#8-3-margin外边距" class="headerlink" title="8.3 margin外边距"></a>8.3 margin外边距</h4><pre><code class="hljs">margin-top / margin-left / margin-right / margin-bottom;</code></pre><p>复合属性:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">margin: top right left bottom; <br></code></pre></td></tr></table></figure><h4 id="8-4-盒子阴影"><a href="#8-4-盒子阴影" class="headerlink" title="8.4 盒子阴影"></a>8.4 盒子阴影</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">Box-shadow:  h-shadow  v-shadow blur   spread  color  insert;<br></code></pre></td></tr></table></figure><p><mark>详细内容</mark></p><img src="/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/box-shadow.png" class title="This is an test image"><h4 id="8-5-图形圆角边框"><a href="#8-5-图形圆角边框" class="headerlink" title="8.5 图形圆角边框"></a>8.5 图形圆角边框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">border-radius：10px  (圆角矩形）/  50%（宽度高度一半）<br>border-radius：10px 20px 30px 40px(左上，右上，右下，左下)<br></code></pre></td></tr></table></figure><h2 id="9-浮动"><a href="#9-浮动" class="headerlink" title="9.浮动"></a>9.浮动</h2><h4 id="9-1-浮动属性"><a href="#9-1-浮动属性" class="headerlink" title="9.1 浮动属性"></a>9.1 浮动属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">float : none / left / right;<br></code></pre></td></tr></table></figure><h4 id="9-2清除浮动"><a href="#9-2清除浮动" class="headerlink" title="9.2清除浮动"></a>9.2清除浮动</h4><pre><code class="hljs">1&gt; clear : 属性值(left / right / both) 2&gt; 父级添加overflow ： hidden3&gt; 父级添加 ：after 伪元素   ：after &#123;content:””; display:block;height:0  ;  clear : both; visibility : hidden;</code></pre><p><mark>推荐语法css</mark></p><img src="/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/clearfloat.png" class title="This is an test image"><h2 id="10-定位"><a href="#10-定位" class="headerlink" title="10.定位"></a>10.定位</h2><p><mark>1.定位&#x3D;定位模式+边偏移</mark><br><mark>2.定位元素必须添加top&#x2F;left&#x2F;right&#x2F;bottom 值</mark><br><mark>子绝父相：绝对定位不占格子，父只能用相对定位</mark></p><h4 id="10-1-定位属性"><a href="#10-1-定位属性" class="headerlink" title="10.1 定位属性"></a>10.1 定位属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML">&#123;<br>    position:relative / <br>             static(无定位) / <br>             relative(以自己原来的位置移动) / <br>             absolute(没父元素或父元素无定位,以浏览器为准定位,高级浮动) / <br>             fixed(页面内固定不动)  (在浏览器可视窗口）/ <br>             Sticky(粘性定位 = 绝对定位+相对定位)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10-2-绝对定位盒子居中语法"><a href="#10-2-绝对定位盒子居中语法" class="headerlink" title="10.2 绝对定位盒子居中语法"></a>10.2 绝对定位盒子居中语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">left:50%(父容器一半) <br>margin-left:-50%(盒子宽度一半)<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">transform:translate(-50%,-50%)<br></code></pre></td></tr></table></figure><p><mark>定位属性详细介绍</mark></p><img src="/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/position.png" class title="This is an test image"><h2 id="11-元素的显示与隐藏"><a href="#11-元素的显示与隐藏" class="headerlink" title="11.元素的显示与隐藏"></a>11.元素的显示与隐藏</h2><h4 id="11-1-display属性"><a href="#11-1-display属性" class="headerlink" title="11.1 display属性"></a>11.1 display属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">display:none(隐藏不占位子) / block (转换为块元素/显示元素);<br></code></pre></td></tr></table></figure><h4 id="11-2-visibility属性"><a href="#11-2-visibility属性" class="headerlink" title="11.2 visibility属性"></a>11.2 visibility属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">Visibility:visible(元素显示) / hidden(元素隐藏，占位子);<br></code></pre></td></tr></table></figure><h4 id="11-3-Overflow（溢出）属性"><a href="#11-3-Overflow（溢出）属性" class="headerlink" title="11.3 Overflow（溢出）属性"></a>11.3 Overflow（溢出）属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML">overflow: visible(默认属性，溢出显示)   <br>overflow: hidden(慎用溢出隐藏)<br>Overflow: scroll(滚动条显示)    <br>overflow: auto (在需要的时候添加滚动条)<br></code></pre></td></tr></table></figure><h2 id="12-精灵图和字体图标"><a href="#12-精灵图和字体图标" class="headerlink" title="12.精灵图和字体图标"></a>12.精灵图和字体图标</h2><h4 id="12-1-精灵图"><a href="#12-1-精灵图" class="headerlink" title="12.1 精灵图"></a>12.1 精灵图</h4><p>目的：把每个小图整合成一个大图减少访问次数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">Background:url(?.img) no-repeat -?(x方向)px -?(y方向)px ;<br></code></pre></td></tr></table></figure><h4 id="12-2-字体图标"><a href="#12-2-字体图标" class="headerlink" title="12.2 字体图标"></a>12.2 字体图标</h4><p><mark>字体图标资源网址</mark></p><img src="/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/icomoon.png" class title="This is an test image"><p><mark>方法步骤：</mark><br>1.下载所需字体图标<br>2.把下载的font文件夹移动到对应目录下<br>3.在css里引入声明 如下图</p><img src="/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/font-family.png" class title="This is an test image"><p>4.生效代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-keyword">@font-face</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;icomoon&#x27;</span>;</span><br><span class="language-css">  <span class="hljs-attribute">src</span>:  <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.eot?53gexo&#x27;</span>);</span><br><span class="language-css">  <span class="hljs-attribute">src</span>:  <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.eot?53gexo#iefix&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="language-css">    <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.ttf?53gexo&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>),</span><br><span class="language-css">    <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.woff?53gexo&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff&#x27;</span>),</span><br><span class="language-css">    <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;fonts/icomoon.svg?53gexo#icomoon&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;svg&#x27;</span>);</span><br><span class="language-css">  <span class="hljs-attribute">font-weight</span>: normal;</span><br><span class="language-css">  <span class="hljs-attribute">font-style</span>: normal;</span><br><span class="language-css">  <span class="hljs-attribute">font-display</span>: block;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">Font-family</span>:’icomoon’</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>[]<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="13-css小三角形案例"><a href="#13-css小三角形案例" class="headerlink" title="13.css小三角形案例"></a>13.css小三角形案例</h2><h4 id="13-1-等腰直角"><a href="#13-1-等腰直角" class="headerlink" title="13.1 等腰直角"></a>13.1 等腰直角</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML">.box&#123;<br>    width: 0;<br>    height: 0;<br>    margin: 100px auto;<br>    border: 50px solid transparent;<br>    border-top-color:pink ;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="13-2-30-x2F-x2F-60-x2F-90三角形"><a href="#13-2-30-x2F-x2F-60-x2F-90三角形" class="headerlink" title="13.2 30&#x2F;&#x2F;60&#x2F;90三角形"></a>13.2 30&#x2F;&#x2F;60&#x2F;90三角形</h4><img src="/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/sanjiaoxing.png" class title="This is an test image"><h2 id="14-用户界面样式"><a href="#14-用户界面样式" class="headerlink" title="14.用户界面样式"></a>14.用户界面样式</h2><h4 id="14-1-鼠标样式"><a href="#14-1-鼠标样式" class="headerlink" title="14.1 鼠标样式"></a>14.1 鼠标样式</h4><img src="/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/cursor.png" class title="This is an test image"><h4 id="14-2-表单轮廓"><a href="#14-2-表单轮廓" class="headerlink" title="14.2 表单轮廓"></a>14.2 表单轮廓</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">Input &#123;outline:none;&#125;<br>Textarea &#123;resize:none&#125;<br></code></pre></td></tr></table></figure><h4 id="14-3-vertical-align"><a href="#14-3-vertical-align" class="headerlink" title="14.3 vertical-align:"></a>14.3 vertical-align:</h4><img src="/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/vertical.png" class title="This is an test image"><h4 id="14-4-文字溢出显示"><a href="#14-4-文字溢出显示" class="headerlink" title="14.4 文字溢出显示"></a>14.4 文字溢出显示</h4><p>单行文字</p><img src="/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/one.png" class title="This is an test image"><p>多行文字</p><img src="/2022/09/15/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%932/two.png" class title="This is an test image"><p><mark>多行文字溢出显示后台做更简单</mark></p>]]></content>
    
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML内容总结</title>
    <link href="/2022/09/14/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%931/"/>
    <url>/2022/09/14/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%931/</url>
    
    <content type="html"><![CDATA[<h1 id="🍭-HTML内容总结"><a href="#🍭-HTML内容总结" class="headerlink" title="🍭 HTML内容总结"></a>🍭 HTML内容总结</h1><h2 id="1-基础元素："><a href="#1-基础元素：" class="headerlink" title="1.基础元素："></a>1.基础元素：</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML">1.1 <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>斜体字<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>1.2 <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>加强粗体<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>1.3 <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>粗体<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>1.4 <span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>下划线<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br>1.5 <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>1.6 <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>1.7 <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>三级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>1.8 <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>四级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>1.9 <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>五级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>1.10 <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>六级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span>   <br>1.11 回车  <span class="hljs-tag">&lt;/<span class="hljs-name">br</span>&gt;</span>   <br>1.12 空格   &amp;nbps<br>1.13 小于号 &amp;lt<br>1.14 大于号 &amp;gt<br></code></pre></td></tr></table></figure><p><strong>example</strong>:</p><p>1.1 <em>斜体字</em><br>1.2 <strong>加强粗体</strong><br>1.3 <b>粗体</b><br>1.4 <u>下划线</u><br>1.5 </p><h1>一级标题</h1><br>1.6 <h2>二级标题</h2><br>1.7 <h3>三级标题</h3><br>1.8 <h4>四级标题</h4><br>1.9 <h5>五级标题</h5><br>1.10 <h6>六级标题</h6><p></p><hr><h3 id="1-2-图片-x2F-链接-x2F-注释"><a href="#1-2-图片-x2F-链接-x2F-注释" class="headerlink" title="1.2 图片&#x2F;链接&#x2F;注释"></a>1.2 图片&#x2F;链接&#x2F;注释</h3><p>1.图片设置: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">”图片地址”alt</span>=<span class="hljs-string">”未显示图片是提示文字”title</span>=<span class="hljs-string">”鼠标上显示”width</span>=<span class="hljs-string">？</span> <span class="hljs-attr">height</span>=<span class="hljs-string">？</span>  <span class="hljs-attr">border</span>=<span class="hljs-string">？（边框宽度）</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2.超链接设置: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">”链接地址”</span> <span class="hljs-attr">title</span>=<span class="hljs-string">”鼠标放置时出现字”</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank（将在新标签页中打开。如果你希望在当前页面打开，忽略这个属性即可“_self”。）&quot;</span>&gt;</span>链接文字<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">2.1 <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">herf</span>=<span class="hljs-string">”#”</span>&gt;</span>空链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>2.2 <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">herf</span>=<span class="hljs-string">”....html”</span>&gt;</span>链接到同一文件夹下的文件<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>2.3 <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">herf</span>=<span class="hljs-string">”....zip”</span>&gt;</span>下载的文件<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>2.4 锚点链接<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">herf</span>=<span class="hljs-string">”#id”</span>&gt;</span>目标标签<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">id</span>=<span class="hljs-string">”id”</span>&gt;</span>目标<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3.注释:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-comment">&lt;!-- 我在注释内！ --&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="3-1列表"><a href="#3-1列表" class="headerlink" title="3.1列表"></a>3.1列表</h2><p>3.1 排在一行内的无序列表:  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>      <br>    豆浆<br>    油条<br>    豆汁<br>    焦圈<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>example</strong>:</p><ul>          豆浆    油条    豆汁    焦圈</ul><hr><p>3.2 每个单独一行的无序列表:  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>豆浆<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>油条<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>豆汁<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>焦圈<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>example</strong>:  </p><ul>  <li>豆浆</li>  <li>油条</li>  <li>豆汁</li>  <li>焦圈</li></ul><hr><p>3.3 有序列表:  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>沿着条路走到头<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>右转<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>直行穿过第一个十字路口<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>在第三个十字路口处左转<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>继续走 300 米，学校就在你的右手边<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>example</strong>:   </p><ol>    <li>沿着条路走到头</li>    <li>右转</li>    <li>直行穿过第一个十字路口</li>    <li>在第三个十字路口处左转</li>    <li>继续走 300 米，学校就在你的右手边</li></ol><hr><h2 id="4-标签-基础标签"><a href="#4-标签-基础标签" class="headerlink" title="4 标签 (基础标签)"></a>4 标签 (基础标签)</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML">4.1 <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  块元素（大盒子）  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>4.2 <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>  行内元素（小盒子）  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="5-表格"><a href="#5-表格" class="headerlink" title="5 表格"></a>5 表格</h2><p>5.1 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>  <span class="hljs-attr">align</span>(<span class="hljs-attr">页面对齐方式</span>) = <span class="hljs-string">“left”/”right”/”center”/</span>    <span class="hljs-attr">Border</span>(<span class="hljs-attr">边框大小</span>)  = <span class="hljs-string">1</span>   <span class="hljs-attr">Cellpadding</span>(<span class="hljs-attr">字和边框的距离大小</span>) =<span class="hljs-string">1</span>    <span class="hljs-attr">Cellspacing</span>(<span class="hljs-attr">单元格之间距离</span>) =<span class="hljs-string">0</span>     <span class="hljs-attr">Width</span>(<span class="hljs-attr">宽度</span>&gt;</span>表格容器)=？<br></code></pre></td></tr></table></figure><p>5.2 一行表格：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头单元格(加粗)<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>每行的小格<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure><p>5.3 合并单元格：</p><pre><code class="hljs">rolspan跨行合并(最上一个单元格写)   colspan跨列合并（最左一个单元格写）</code></pre><p>5.4 代码展示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span> = <span class="hljs-string">1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>example:</strong></p><table border="1">    <tr>        <th>姓名</th>        <th>年龄</th>    </tr>    <tr>        <td>张三</td>        <td>18</td>    </tr></table><hr><h2 id="6-表单"><a href="#6-表单" class="headerlink" title="6.表单"></a>6.表单</h2><p>6.1 表单域：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">”url(传递信息的地址)”</span> <span class="hljs-attr">method</span>=<span class="hljs-string">”post/get”</span> <span class="hljs-attr">name</span>=<span class="hljs-string">”name”</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>6.2 表单元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">input</span>  <span class="hljs-attr">type</span>=<span class="hljs-string">”text(文本）/password（密码框）/radio（单选按钮）/checkbox（多选按钮）”</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">”表单id”(相同name才能实现单选)</span>   <span class="hljs-attr">value</span>=<span class="hljs-string">”方框内的文字提示”</span>   <span class="hljs-attr">checked</span>=<span class="hljs-string">“checked”（单选/多选自动选择）</span> </span><br><span class="hljs-tag"><span class="hljs-attr">Maxlength</span>=<span class="hljs-string">“”最长字符</span>&gt;</span>   <br></code></pre></td></tr></table></figure><p><strong>example:</strong></p><p>6.2.1 type&#x3D;”text”<br><input type="text" name="fist" value="请输入"></p><p>6.2.2 type&#x3D;”password”<br><input type="password" name="second" value></p><p>6.2.3 type&#x3D;”radio”<br><input type="radio" name="third" value="check">男<br><input type="radio" name="third" value="check">女</p><p>6.2.4 type&#x3D;”checkbox”<br><input type="checkbox" name="fourth" value="check" checked="checked"><br><input type="checkbox" name="fourth" value="check"></p><p>6.3 label标签 </p><pre><code class="hljs">label标签点击标签自动定位到input里</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">”text”</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>example:</strong></p><p><label for="text">…</label><input type="text" id="text"></p><p>6.4select 下拉表单元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">select</span>=<span class="hljs-string">”selected”(默认选择)</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>example:</strong></p><select>    <option select="”selected”(默认选择)">0</option>    <option>1</option>    <option>2</option>    <option>3</option>    <option>4</option></select><p>6.5textare 文本域</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">textare</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textare</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h2 id="7-head容器中内容"><a href="#7-head容器中内容" class="headerlink" title="7.head容器中内容"></a>7.head容器中内容</h2><p>7.1 设置utf-8格式 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span> = <span class="hljs-string">“utf-8”</span>&gt;</span><br></code></pre></td></tr></table></figure><p>7.2网页标题：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br></code></pre></td></tr></table></figure><p>7.3设置主语言：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span> = <span class="hljs-string">“zh-CN”</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>markdown语法</title>
    <link href="/2022/09/13/markdown%E6%80%BB%E7%BB%93/markdown%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/09/13/markdown%E6%80%BB%E7%BB%93/markdown%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="🍭-Markdown语法示例"><a href="#🍭-Markdown语法示例" class="headerlink" title="🍭 Markdown语法示例"></a>🍭 Markdown语法示例</h1><h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题[ # ]"></a>1.标题[ # ]</h2><pre><code class="hljs"># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><p><em>example:</em></p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h2 id="2-强调-或-包围"><a href="#2-强调-或-包围" class="headerlink" title="2.强调[ ** 或 __ 包围 ]"></a>2.强调[ ** 或 __ 包围 ]</h2><pre><code class="hljs">**强调字体**__强调字体__</code></pre><p><em>example:</em><br><strong>强调字体</strong><br><strong>强调字体</strong></p><hr><h2 id="3-斜体-或-包围"><a href="#3-斜体-或-包围" class="headerlink" title="3.斜体 [ * 或 _ 包围 ]"></a>3.斜体 [ * 或 _ 包围 ]</h2><pre><code class="hljs">*斜体字体*_斜体字体_</code></pre><p><em>example:</em><br><em>斜体字体</em><br><em>斜体字体</em></p><hr><h2 id="4-删除线-包围"><a href="#4-删除线-包围" class="headerlink" title="4.删除线 [ ~~包围 ]"></a>4.删除线 [ ~~包围 ]</h2><pre><code class="hljs">~~删除的文字~~</code></pre><p><em>example:</em><br><del>删除的文字</del></p><hr><h2 id="5-高亮-x3D-x3D-包围"><a href="#5-高亮-x3D-x3D-包围" class="headerlink" title="5.高亮  [ &#x3D;&#x3D; 包围 ]"></a>5.高亮  [ &#x3D;&#x3D; 包围 ]</h2><pre><code class="hljs">==高亮字体==&lt;mark&gt;高亮字体&lt;/mark&gt;</code></pre><p><em>example:</em><br>&#x3D;&#x3D;高亮字体&#x3D;&#x3D;<br><mark>高亮字体</mark></p><hr><h2 id="6-代码行-96-包围"><a href="#6-代码行-96-包围" class="headerlink" title="6.代码行 [ &#96; 包围 ]"></a>6.代码行 [ &#96; 包围 ]</h2><pre><code class="hljs">`print(&#39;a&#39;)`</code></pre><p><em>example:</em><br><code>printf(&#39;a&#39;)</code></p><hr><h2 id="7-代码块-‘’’-包围"><a href="#7-代码块-‘’’-包围" class="headerlink" title="7.代码块 [ ‘’’ 包围 ]"></a>7.代码块 [ ‘’’ 包围 ]</h2><p><em>example:</em></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-built_in">int</span> mian() &#123;<br>    printf（“Hello, world!\n<span class="hljs-string">&quot;）;</span><br><span class="hljs-string">    retrun O;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><hr><h2 id="8-引用-gt-并且-gt-gt-前置"><a href="#8-引用-gt-并且-gt-gt-前置" class="headerlink" title="8.引用 [ &gt; 并且 &gt; &gt; 前置]"></a>8.引用 [ &gt; 并且 &gt; &gt; 前置]</h2><pre><code class="hljs">&gt; 一级引用&gt; &gt; 二级引用</code></pre><p><em>example:</em></p><blockquote><p>一级引用</p><blockquote><p>二级引用</p></blockquote></blockquote><hr><h2 id="9-无序列表-或-或-前置"><a href="#9-无序列表-或-或-前置" class="headerlink" title="9.无序列表[ - 或 + 或 * 前置]"></a>9.无序列表[ - 或 + 或 * 前置]</h2><pre><code class="hljs">- 无序列表+ 无序列表* 无序列表</code></pre><p><em>example:</em></p><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><hr><h2 id="10-有序列表-数字-前置"><a href="#10-有序列表-数字-前置" class="headerlink" title="10.有序列表 [ 数字 + . 前置 ]"></a>10.有序列表 [ 数字 + . 前置 ]</h2><pre><code class="hljs">1. 有序列表2. 有序列表3. 有序列表</code></pre><p><em>example:</em></p><ol><li>有序列表</li><li>有序列表</li><li>有序列表</li></ol><hr><h2 id="11-注释-后置"><a href="#11-注释-后置" class="headerlink" title="11. 注释 [ [^] 后置]"></a>11. 注释 [ [^] 后置]</h2><pre><code class="hljs">这是注释&lt;sup id=&quot;fnref:1&quot; class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;&lt;span class=&quot;hint--top hint--rounded&quot; aria-label=&quot;注释的解释&quot;&gt;[1]&lt;/span&gt;&lt;/a&gt;&lt;/sup&gt;</code></pre><p><em>example:</em><br>这是注释<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="注释的解释">[1]</span></a></sup></p><hr><h2 id="12-链接-常用-“-”-“-”-分别包围文本与链接"><a href="#12-链接-常用-“-”-“-”-分别包围文本与链接" class="headerlink" title="12. 链接 [常用 “[ ]” + “( )” 分别包围文本与链接]"></a>12. 链接 [常用 “[ ]” + “( )” 分别包围文本与链接]</h2><pre><code class="hljs">[正文](链接)</code></pre><hr><h2 id="13-任务列表-“-”-空格-前置"><a href="#13-任务列表-“-”-空格-前置" class="headerlink" title="13.任务列表 [“- [ ]” + 空格 前置]"></a>13.任务列表 [“- [ ]” + 空格 前置]</h2><pre><code class="hljs">&quot;- [ ] 刷B站&quot;&quot;- [ ] 写代码&quot;&quot;- [x] 起床&quot;</code></pre><p><em>example:</em></p><ul><li><input disabled type="checkbox"> 刷B站</li><li><input disabled type="checkbox"> 写代码</li><li><input checked disabled type="checkbox"> 起床</li></ul><hr><h2 id="14-表格-用-“-”-绘制表格边框"><a href="#14-表格-用-“-”-绘制表格边框" class="headerlink" title="14.表格 [用 “|” 绘制表格边框]"></a>14.表格 [用 “|” 绘制表格边框]</h2><pre><code class="hljs">学号|姓名|年龄:---|:---:|---:  (引号的位置代表着 左对齐, 居中, 右对齐)1|b|242|b|25</code></pre><p><em>example:</em></p><table><thead><tr><th align="left">学号</th><th align="center">姓名</th><th align="right">年龄</th></tr></thead><tbody><tr><td align="left">1</td><td align="center">b</td><td align="right">24</td></tr><tr><td align="left">2</td><td align="center">b</td><td align="right">25</td></tr></tbody></table><hr><h2 id="15-图片-“-图片-图片地址-”"><a href="#15-图片-“-图片-图片地址-”" class="headerlink" title="15.图片 [ “! [图片] (图片地址)” ]"></a>15.图片 [ “! [图片] (图片地址)” ]</h2><pre><code class="hljs">&#123;% asset_img example.png This is an test image %&#125;</code></pre><p><em>example:</em></p><img src="/2022/09/13/markdown%E6%80%BB%E7%BB%93/markdown%E8%AF%AD%E6%B3%95/example.png" class title="This is an test image"><hr><h2 id="16-分割线-按三个-“-”-或-“-“-或-“-”-并敲回车"><a href="#16-分割线-按三个-“-”-或-“-“-或-“-”-并敲回车" class="headerlink" title="16.分割线 [按三个 “*” 或 “-“ 或 “_” 并敲回车]"></a>16.分割线 [按三个 “*” 或 “-“ 或 “_” 并敲回车]</h2><pre><code class="hljs">***---___</code></pre><p><em>example:</em></p><ol><li></li></ol><hr><ol start="2"><li></li></ol><hr><ol start="3"><li></li></ol><hr><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p><strong>不断总结markdown实用语法</strong><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>注释的解释<br><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:1" class="footnote-text"><span>注释的解释<br><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></p>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="/2022/09/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
    <url>/2022/09/12/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>hello world</p><h2 id="第一段"><a href="#第一段" class="headerlink" title="第一段"></a>第一段</h2><hr><h2 id="第二段"><a href="#第二段" class="headerlink" title="第二段"></a>第二段</h2><hr><p>end结束</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/12/hello-world/"/>
    <url>/2022/09/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
